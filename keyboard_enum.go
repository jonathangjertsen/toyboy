// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.0
// Revision: 4061a5d82779342c5863a515363feb943fa59455
// Build Date: 2025-07-22T03:42:20Z
// Built By: goreleaser

package main

import (
	"errors"
	"fmt"
)

const (
	SOCDResolutionUnfiltered SOCDResolution = iota
	SOCDResolutionOppositeNeutral
	SOCDResolutionFirstWinsSecondDisabled
	SOCDResolutionOppositeNeutralFirstDisabled
)

var ErrInvalidSOCDResolution = errors.New("not a valid SOCDResolution")

const _SOCDResolutionName = "UnfilteredOppositeNeutralFirstWinsSecondDisabledOppositeNeutralFirstDisabled"

// SOCDResolutionValues returns a list of the values for SOCDResolution
func SOCDResolutionValues() []SOCDResolution {
	return []SOCDResolution{
		SOCDResolutionUnfiltered,
		SOCDResolutionOppositeNeutral,
		SOCDResolutionFirstWinsSecondDisabled,
		SOCDResolutionOppositeNeutralFirstDisabled,
	}
}

var _SOCDResolutionMap = map[SOCDResolution]string{
	SOCDResolutionUnfiltered:                   _SOCDResolutionName[0:10],
	SOCDResolutionOppositeNeutral:              _SOCDResolutionName[10:25],
	SOCDResolutionFirstWinsSecondDisabled:      _SOCDResolutionName[25:48],
	SOCDResolutionOppositeNeutralFirstDisabled: _SOCDResolutionName[48:76],
}

// String implements the Stringer interface.
func (x SOCDResolution) String() string {
	if str, ok := _SOCDResolutionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SOCDResolution(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SOCDResolution) IsValid() bool {
	_, ok := _SOCDResolutionMap[x]
	return ok
}

var _SOCDResolutionValue = map[string]SOCDResolution{
	_SOCDResolutionName[0:10]:  SOCDResolutionUnfiltered,
	_SOCDResolutionName[10:25]: SOCDResolutionOppositeNeutral,
	_SOCDResolutionName[25:48]: SOCDResolutionFirstWinsSecondDisabled,
	_SOCDResolutionName[48:76]: SOCDResolutionOppositeNeutralFirstDisabled,
}

// ParseSOCDResolution attempts to convert a string to a SOCDResolution.
func ParseSOCDResolution(name string) (SOCDResolution, error) {
	if x, ok := _SOCDResolutionValue[name]; ok {
		return x, nil
	}
	return SOCDResolution(0), fmt.Errorf("%s is %w", name, ErrInvalidSOCDResolution)
}

// MarshalText implements the text marshaller method.
func (x SOCDResolution) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *SOCDResolution) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSOCDResolution(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *SOCDResolution) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

// Set implements the Golang flag.Value interface func.
func (x *SOCDResolution) Set(val string) error {
	v, err := ParseSOCDResolution(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *SOCDResolution) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *SOCDResolution) Type() string {
	return "SOCDResolution"
}
