// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.0
// Revision: 4061a5d82779342c5863a515363feb943fa59455
// Build Date: 2025-07-22T03:42:20Z
// Built By: goreleaser

package main

import (
	"errors"
	"fmt"
)

const (
	DataIDNone DataID = iota
	DataIDViewport
	DataIDCPURegisters
	DataIDPPURegisters
	DataIDAPURegisters
	DataIDDisassembly
	DataIDHRAM
	DataIDWRAM
	DataIDOAM
	DataIDCPUState
	DataIDClock
	DataIDExecutionLog
	DataIDCartridge
)

var ErrInvalidDataID = errors.New("not a valid DataID")

const _DataIDName = "NoneViewportCPURegistersPPURegistersAPURegistersDisassemblyHRAMWRAMOAMCPUStateClockExecutionLogCartridge"

// DataIDValues returns a list of the values for DataID
func DataIDValues() []DataID {
	return []DataID{
		DataIDNone,
		DataIDViewport,
		DataIDCPURegisters,
		DataIDPPURegisters,
		DataIDAPURegisters,
		DataIDDisassembly,
		DataIDHRAM,
		DataIDWRAM,
		DataIDOAM,
		DataIDCPUState,
		DataIDClock,
		DataIDExecutionLog,
		DataIDCartridge,
	}
}

var _DataIDMap = map[DataID]string{
	DataIDNone:         _DataIDName[0:4],
	DataIDViewport:     _DataIDName[4:12],
	DataIDCPURegisters: _DataIDName[12:24],
	DataIDPPURegisters: _DataIDName[24:36],
	DataIDAPURegisters: _DataIDName[36:48],
	DataIDDisassembly:  _DataIDName[48:59],
	DataIDHRAM:         _DataIDName[59:63],
	DataIDWRAM:         _DataIDName[63:67],
	DataIDOAM:          _DataIDName[67:70],
	DataIDCPUState:     _DataIDName[70:78],
	DataIDClock:        _DataIDName[78:83],
	DataIDExecutionLog: _DataIDName[83:95],
	DataIDCartridge:    _DataIDName[95:104],
}

// String implements the Stringer interface.
func (x DataID) String() string {
	if str, ok := _DataIDMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DataID(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DataID) IsValid() bool {
	_, ok := _DataIDMap[x]
	return ok
}

var _DataIDValue = map[string]DataID{
	_DataIDName[0:4]:    DataIDNone,
	_DataIDName[4:12]:   DataIDViewport,
	_DataIDName[12:24]:  DataIDCPURegisters,
	_DataIDName[24:36]:  DataIDPPURegisters,
	_DataIDName[36:48]:  DataIDAPURegisters,
	_DataIDName[48:59]:  DataIDDisassembly,
	_DataIDName[59:63]:  DataIDHRAM,
	_DataIDName[63:67]:  DataIDWRAM,
	_DataIDName[67:70]:  DataIDOAM,
	_DataIDName[70:78]:  DataIDCPUState,
	_DataIDName[78:83]:  DataIDClock,
	_DataIDName[83:95]:  DataIDExecutionLog,
	_DataIDName[95:104]: DataIDCartridge,
}

// ParseDataID attempts to convert a string to a DataID.
func ParseDataID(name string) (DataID, error) {
	if x, ok := _DataIDValue[name]; ok {
		return x, nil
	}
	return DataID(0), fmt.Errorf("%s is %w", name, ErrInvalidDataID)
}

// MarshalText implements the text marshaller method.
func (x DataID) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *DataID) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDataID(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *DataID) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

// Set implements the Golang flag.Value interface func.
func (x *DataID) Set(val string) error {
	v, err := ParseDataID(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *DataID) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *DataID) Type() string {
	return "DataID"
}
