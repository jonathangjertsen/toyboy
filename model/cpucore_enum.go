// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	CBTargetB CBTarget = iota
	CBTargetC
	CBTargetD
	CBTargetE
	CBTargetH
	CBTargetL
	CBTargetIndirectHL
	CBTargetA
)

var ErrInvalidCBTarget = errors.New("not a valid CBTarget")

const _CBTargetName = "BCDEHLIndirectHLA"

// CBTargetValues returns a list of the values for CBTarget
func CBTargetValues() []CBTarget {
	return []CBTarget{
		CBTargetB,
		CBTargetC,
		CBTargetD,
		CBTargetE,
		CBTargetH,
		CBTargetL,
		CBTargetIndirectHL,
		CBTargetA,
	}
}

var _CBTargetMap = map[CBTarget]string{
	CBTargetB:          _CBTargetName[0:1],
	CBTargetC:          _CBTargetName[1:2],
	CBTargetD:          _CBTargetName[2:3],
	CBTargetE:          _CBTargetName[3:4],
	CBTargetH:          _CBTargetName[4:5],
	CBTargetL:          _CBTargetName[5:6],
	CBTargetIndirectHL: _CBTargetName[6:16],
	CBTargetA:          _CBTargetName[16:17],
}

// String implements the Stringer interface.
func (x CBTarget) String() string {
	if str, ok := _CBTargetMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CBTarget(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CBTarget) IsValid() bool {
	_, ok := _CBTargetMap[x]
	return ok
}

var _CBTargetValue = map[string]CBTarget{
	_CBTargetName[0:1]:   CBTargetB,
	_CBTargetName[1:2]:   CBTargetC,
	_CBTargetName[2:3]:   CBTargetD,
	_CBTargetName[3:4]:   CBTargetE,
	_CBTargetName[4:5]:   CBTargetH,
	_CBTargetName[5:6]:   CBTargetL,
	_CBTargetName[6:16]:  CBTargetIndirectHL,
	_CBTargetName[16:17]: CBTargetA,
}

// ParseCBTarget attempts to convert a string to a CBTarget.
func ParseCBTarget(name string) (CBTarget, error) {
	if x, ok := _CBTargetValue[name]; ok {
		return x, nil
	}
	return CBTarget(0), fmt.Errorf("%s is %w", name, ErrInvalidCBTarget)
}

// MarshalText implements the text marshaller method.
func (x CBTarget) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CBTarget) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCBTarget(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *CBTarget) Set(val string) error {
	v, err := ParseCBTarget(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *CBTarget) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *CBTarget) Type() string {
	return "CBTarget"
}

const (
	OpcodeNop Opcode = iota
	OpcodeLDBCnn
	OpcodeINCB Opcode = iota + 2
	OpcodeDECB
	OpcodeLDBn
	OpcodeINCC Opcode = iota + 7
	OpcodeDECC
	OpcodeLDCn
	OpcodeLDDEnn Opcode = iota + 9
	OpcodeINCDE  Opcode = iota + 10
	OpcodeINCD
	OpcodeDECD
	OpcodeLDDn
	OpcodeRLA
	OpcodeJRe
	OpcodeLDADE Opcode = iota + 11
	OpcodeINCE  Opcode = iota + 12
	OpcodeDECE
	OpcodeLDEn
	OpcodeJRNZe Opcode = iota + 13
	OpcodeLDHLnn
	OpcodeLDHLAInc
	OpcodeINCHL
	OpcodeINCH
	OpcodeDECH
	OpcodeLDHn
	OpcodeJRZe Opcode = iota + 14
	OpcodeINCL Opcode = iota + 17
	OpcodeDECL
	OpcodeLDLn
	OpcodeLDSPnn Opcode = iota + 19
	OpcodeLDHLADec
	OpcodeINCA Opcode = iota + 28
	OpcodeDECA
	OpcodeLDAn
	OpcodeLDBB Opcode = iota + 29
	OpcodeLDBC
	OpcodeLDBD
	OpcodeLDBE
	OpcodeLDBH
	OpcodeLDBL
	OpcodeLDBHL
	OpcodeLDBA
	OpcodeLDCB
	OpcodeLDCC
	OpcodeLDCD
	OpcodeLDCE
	OpcodeLDCH
	OpcodeLDCL
	OpcodeLDCHL
	OpcodeLDCA
	OpcodeLDDB
	OpcodeLDDC
	OpcodeLDDD
	OpcodeLDDE
	OpcodeLDDH
	OpcodeLDDL
	OpcodeLDDHL
	OpcodeLDDA
	OpcodeLDEB
	OpcodeLDEC
	OpcodeLDED
	OpcodeLDEE
	OpcodeLDEH
	OpcodeLDEL
	OpcodeLDEHL
	OpcodeLDEA
	OpcodeLDHB
	OpcodeLDHC
	OpcodeLDHD
	OpcodeLDHE
	OpcodeLDHH
	OpcodeLDHL
	OpcodeLDHHL
	OpcodeLDHA
	OpcodeLDLB
	OpcodeLDLC
	OpcodeLDLD
	OpcodeLDLE
	OpcodeLDLH
	OpcodeLDLL
	OpcodeLDLHL
	OpcodeLDLA
	OpcodeLDHLB
	OpcodeLDHLC
	OpcodeLDHLD
	OpcodeLDHLE
	OpcodeLDHLH
	OpcodeLDHLL
	OpcodeHALT
	OpcodeLDHLA
	OpcodeLDAB
	OpcodeLDAC
	OpcodeLDAD
	OpcodeLDAE
	OpcodeLDAH
	OpcodeLDAL
	OpcodeLDAHL
	OpcodeLDAA
	OpcodeXORA   Opcode = iota + 76
	OpcodePOPBC  Opcode = iota + 93
	OpcodePUSHBC Opcode = iota + 96
	OpcodeRET    Opcode = iota + 99
	OpcodeCB     Opcode = iota + 100
	OpcodeCALLnn Opcode = iota + 101
	OpcodeLDHnA  Opcode = iota + 119
	OpcodeLDHCA  Opcode = iota + 120
	OpcodeLDnnA  Opcode = iota + 127
	OpcodeLDHAn  Opcode = iota + 132
	OpcodeDI     Opcode = iota + 134
	OpcodeEI     Opcode = iota + 141
	OpcodeCPn    Opcode = iota + 143
)

var ErrInvalidOpcode = errors.New("not a valid Opcode")

const _OpcodeName = "NopLDBCnnINCBDECBLDBnINCCDECCLDCnLDDEnnINCDEINCDDECDLDDnRLAJReLDADEINCEDECELDEnJRNZeLDHLnnLDHLAIncINCHLINCHDECHLDHnJRZeINCLDECLLDLnLDSPnnLDHLADecINCADECALDAnLDBBLDBCLDBDLDBELDBHLDBLLDBHLLDBALDCBLDCCLDCDLDCELDCHLDCLLDCHLLDCALDDBLDDCLDDDLDDELDDHLDDLLDDHLLDDALDEBLDECLDEDLDEELDEHLDELLDEHLLDEALDHBLDHCLDHDLDHELDHHLDHLLDHHLLDHALDLBLDLCLDLDLDLELDLHLDLLLDLHLLDLALDHLBLDHLCLDHLDLDHLELDHLHLDHLLHALTLDHLALDABLDACLDADLDAELDAHLDALLDAHLLDAAXORAPOPBCPUSHBCRETCBCALLnnLDHnALDHCALDnnALDHAnDIEICPn"

// OpcodeValues returns a list of the values for Opcode
func OpcodeValues() []Opcode {
	return []Opcode{
		OpcodeNop,
		OpcodeLDBCnn,
		OpcodeINCB,
		OpcodeDECB,
		OpcodeLDBn,
		OpcodeINCC,
		OpcodeDECC,
		OpcodeLDCn,
		OpcodeLDDEnn,
		OpcodeINCDE,
		OpcodeINCD,
		OpcodeDECD,
		OpcodeLDDn,
		OpcodeRLA,
		OpcodeJRe,
		OpcodeLDADE,
		OpcodeINCE,
		OpcodeDECE,
		OpcodeLDEn,
		OpcodeJRNZe,
		OpcodeLDHLnn,
		OpcodeLDHLAInc,
		OpcodeINCHL,
		OpcodeINCH,
		OpcodeDECH,
		OpcodeLDHn,
		OpcodeJRZe,
		OpcodeINCL,
		OpcodeDECL,
		OpcodeLDLn,
		OpcodeLDSPnn,
		OpcodeLDHLADec,
		OpcodeINCA,
		OpcodeDECA,
		OpcodeLDAn,
		OpcodeLDBB,
		OpcodeLDBC,
		OpcodeLDBD,
		OpcodeLDBE,
		OpcodeLDBH,
		OpcodeLDBL,
		OpcodeLDBHL,
		OpcodeLDBA,
		OpcodeLDCB,
		OpcodeLDCC,
		OpcodeLDCD,
		OpcodeLDCE,
		OpcodeLDCH,
		OpcodeLDCL,
		OpcodeLDCHL,
		OpcodeLDCA,
		OpcodeLDDB,
		OpcodeLDDC,
		OpcodeLDDD,
		OpcodeLDDE,
		OpcodeLDDH,
		OpcodeLDDL,
		OpcodeLDDHL,
		OpcodeLDDA,
		OpcodeLDEB,
		OpcodeLDEC,
		OpcodeLDED,
		OpcodeLDEE,
		OpcodeLDEH,
		OpcodeLDEL,
		OpcodeLDEHL,
		OpcodeLDEA,
		OpcodeLDHB,
		OpcodeLDHC,
		OpcodeLDHD,
		OpcodeLDHE,
		OpcodeLDHH,
		OpcodeLDHL,
		OpcodeLDHHL,
		OpcodeLDHA,
		OpcodeLDLB,
		OpcodeLDLC,
		OpcodeLDLD,
		OpcodeLDLE,
		OpcodeLDLH,
		OpcodeLDLL,
		OpcodeLDLHL,
		OpcodeLDLA,
		OpcodeLDHLB,
		OpcodeLDHLC,
		OpcodeLDHLD,
		OpcodeLDHLE,
		OpcodeLDHLH,
		OpcodeLDHLL,
		OpcodeHALT,
		OpcodeLDHLA,
		OpcodeLDAB,
		OpcodeLDAC,
		OpcodeLDAD,
		OpcodeLDAE,
		OpcodeLDAH,
		OpcodeLDAL,
		OpcodeLDAHL,
		OpcodeLDAA,
		OpcodeXORA,
		OpcodePOPBC,
		OpcodePUSHBC,
		OpcodeRET,
		OpcodeCB,
		OpcodeCALLnn,
		OpcodeLDHnA,
		OpcodeLDHCA,
		OpcodeLDnnA,
		OpcodeLDHAn,
		OpcodeDI,
		OpcodeEI,
		OpcodeCPn,
	}
}

var _OpcodeMap = map[Opcode]string{
	OpcodeNop:      _OpcodeName[0:3],
	OpcodeLDBCnn:   _OpcodeName[3:9],
	OpcodeINCB:     _OpcodeName[9:13],
	OpcodeDECB:     _OpcodeName[13:17],
	OpcodeLDBn:     _OpcodeName[17:21],
	OpcodeINCC:     _OpcodeName[21:25],
	OpcodeDECC:     _OpcodeName[25:29],
	OpcodeLDCn:     _OpcodeName[29:33],
	OpcodeLDDEnn:   _OpcodeName[33:39],
	OpcodeINCDE:    _OpcodeName[39:44],
	OpcodeINCD:     _OpcodeName[44:48],
	OpcodeDECD:     _OpcodeName[48:52],
	OpcodeLDDn:     _OpcodeName[52:56],
	OpcodeRLA:      _OpcodeName[56:59],
	OpcodeJRe:      _OpcodeName[59:62],
	OpcodeLDADE:    _OpcodeName[62:67],
	OpcodeINCE:     _OpcodeName[67:71],
	OpcodeDECE:     _OpcodeName[71:75],
	OpcodeLDEn:     _OpcodeName[75:79],
	OpcodeJRNZe:    _OpcodeName[79:84],
	OpcodeLDHLnn:   _OpcodeName[84:90],
	OpcodeLDHLAInc: _OpcodeName[90:98],
	OpcodeINCHL:    _OpcodeName[98:103],
	OpcodeINCH:     _OpcodeName[103:107],
	OpcodeDECH:     _OpcodeName[107:111],
	OpcodeLDHn:     _OpcodeName[111:115],
	OpcodeJRZe:     _OpcodeName[115:119],
	OpcodeINCL:     _OpcodeName[119:123],
	OpcodeDECL:     _OpcodeName[123:127],
	OpcodeLDLn:     _OpcodeName[127:131],
	OpcodeLDSPnn:   _OpcodeName[131:137],
	OpcodeLDHLADec: _OpcodeName[137:145],
	OpcodeINCA:     _OpcodeName[145:149],
	OpcodeDECA:     _OpcodeName[149:153],
	OpcodeLDAn:     _OpcodeName[153:157],
	OpcodeLDBB:     _OpcodeName[157:161],
	OpcodeLDBC:     _OpcodeName[161:165],
	OpcodeLDBD:     _OpcodeName[165:169],
	OpcodeLDBE:     _OpcodeName[169:173],
	OpcodeLDBH:     _OpcodeName[173:177],
	OpcodeLDBL:     _OpcodeName[177:181],
	OpcodeLDBHL:    _OpcodeName[181:186],
	OpcodeLDBA:     _OpcodeName[186:190],
	OpcodeLDCB:     _OpcodeName[190:194],
	OpcodeLDCC:     _OpcodeName[194:198],
	OpcodeLDCD:     _OpcodeName[198:202],
	OpcodeLDCE:     _OpcodeName[202:206],
	OpcodeLDCH:     _OpcodeName[206:210],
	OpcodeLDCL:     _OpcodeName[210:214],
	OpcodeLDCHL:    _OpcodeName[214:219],
	OpcodeLDCA:     _OpcodeName[219:223],
	OpcodeLDDB:     _OpcodeName[223:227],
	OpcodeLDDC:     _OpcodeName[227:231],
	OpcodeLDDD:     _OpcodeName[231:235],
	OpcodeLDDE:     _OpcodeName[235:239],
	OpcodeLDDH:     _OpcodeName[239:243],
	OpcodeLDDL:     _OpcodeName[243:247],
	OpcodeLDDHL:    _OpcodeName[247:252],
	OpcodeLDDA:     _OpcodeName[252:256],
	OpcodeLDEB:     _OpcodeName[256:260],
	OpcodeLDEC:     _OpcodeName[260:264],
	OpcodeLDED:     _OpcodeName[264:268],
	OpcodeLDEE:     _OpcodeName[268:272],
	OpcodeLDEH:     _OpcodeName[272:276],
	OpcodeLDEL:     _OpcodeName[276:280],
	OpcodeLDEHL:    _OpcodeName[280:285],
	OpcodeLDEA:     _OpcodeName[285:289],
	OpcodeLDHB:     _OpcodeName[289:293],
	OpcodeLDHC:     _OpcodeName[293:297],
	OpcodeLDHD:     _OpcodeName[297:301],
	OpcodeLDHE:     _OpcodeName[301:305],
	OpcodeLDHH:     _OpcodeName[305:309],
	OpcodeLDHL:     _OpcodeName[309:313],
	OpcodeLDHHL:    _OpcodeName[313:318],
	OpcodeLDHA:     _OpcodeName[318:322],
	OpcodeLDLB:     _OpcodeName[322:326],
	OpcodeLDLC:     _OpcodeName[326:330],
	OpcodeLDLD:     _OpcodeName[330:334],
	OpcodeLDLE:     _OpcodeName[334:338],
	OpcodeLDLH:     _OpcodeName[338:342],
	OpcodeLDLL:     _OpcodeName[342:346],
	OpcodeLDLHL:    _OpcodeName[346:351],
	OpcodeLDLA:     _OpcodeName[351:355],
	OpcodeLDHLB:    _OpcodeName[355:360],
	OpcodeLDHLC:    _OpcodeName[360:365],
	OpcodeLDHLD:    _OpcodeName[365:370],
	OpcodeLDHLE:    _OpcodeName[370:375],
	OpcodeLDHLH:    _OpcodeName[375:380],
	OpcodeLDHLL:    _OpcodeName[380:385],
	OpcodeHALT:     _OpcodeName[385:389],
	OpcodeLDHLA:    _OpcodeName[389:394],
	OpcodeLDAB:     _OpcodeName[394:398],
	OpcodeLDAC:     _OpcodeName[398:402],
	OpcodeLDAD:     _OpcodeName[402:406],
	OpcodeLDAE:     _OpcodeName[406:410],
	OpcodeLDAH:     _OpcodeName[410:414],
	OpcodeLDAL:     _OpcodeName[414:418],
	OpcodeLDAHL:    _OpcodeName[418:423],
	OpcodeLDAA:     _OpcodeName[423:427],
	OpcodeXORA:     _OpcodeName[427:431],
	OpcodePOPBC:    _OpcodeName[431:436],
	OpcodePUSHBC:   _OpcodeName[436:442],
	OpcodeRET:      _OpcodeName[442:445],
	OpcodeCB:       _OpcodeName[445:447],
	OpcodeCALLnn:   _OpcodeName[447:453],
	OpcodeLDHnA:    _OpcodeName[453:458],
	OpcodeLDHCA:    _OpcodeName[458:463],
	OpcodeLDnnA:    _OpcodeName[463:468],
	OpcodeLDHAn:    _OpcodeName[468:473],
	OpcodeDI:       _OpcodeName[473:475],
	OpcodeEI:       _OpcodeName[475:477],
	OpcodeCPn:      _OpcodeName[477:480],
}

// String implements the Stringer interface.
func (x Opcode) String() string {
	if str, ok := _OpcodeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Opcode(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Opcode) IsValid() bool {
	_, ok := _OpcodeMap[x]
	return ok
}

var _OpcodeValue = map[string]Opcode{
	_OpcodeName[0:3]:     OpcodeNop,
	_OpcodeName[3:9]:     OpcodeLDBCnn,
	_OpcodeName[9:13]:    OpcodeINCB,
	_OpcodeName[13:17]:   OpcodeDECB,
	_OpcodeName[17:21]:   OpcodeLDBn,
	_OpcodeName[21:25]:   OpcodeINCC,
	_OpcodeName[25:29]:   OpcodeDECC,
	_OpcodeName[29:33]:   OpcodeLDCn,
	_OpcodeName[33:39]:   OpcodeLDDEnn,
	_OpcodeName[39:44]:   OpcodeINCDE,
	_OpcodeName[44:48]:   OpcodeINCD,
	_OpcodeName[48:52]:   OpcodeDECD,
	_OpcodeName[52:56]:   OpcodeLDDn,
	_OpcodeName[56:59]:   OpcodeRLA,
	_OpcodeName[59:62]:   OpcodeJRe,
	_OpcodeName[62:67]:   OpcodeLDADE,
	_OpcodeName[67:71]:   OpcodeINCE,
	_OpcodeName[71:75]:   OpcodeDECE,
	_OpcodeName[75:79]:   OpcodeLDEn,
	_OpcodeName[79:84]:   OpcodeJRNZe,
	_OpcodeName[84:90]:   OpcodeLDHLnn,
	_OpcodeName[90:98]:   OpcodeLDHLAInc,
	_OpcodeName[98:103]:  OpcodeINCHL,
	_OpcodeName[103:107]: OpcodeINCH,
	_OpcodeName[107:111]: OpcodeDECH,
	_OpcodeName[111:115]: OpcodeLDHn,
	_OpcodeName[115:119]: OpcodeJRZe,
	_OpcodeName[119:123]: OpcodeINCL,
	_OpcodeName[123:127]: OpcodeDECL,
	_OpcodeName[127:131]: OpcodeLDLn,
	_OpcodeName[131:137]: OpcodeLDSPnn,
	_OpcodeName[137:145]: OpcodeLDHLADec,
	_OpcodeName[145:149]: OpcodeINCA,
	_OpcodeName[149:153]: OpcodeDECA,
	_OpcodeName[153:157]: OpcodeLDAn,
	_OpcodeName[157:161]: OpcodeLDBB,
	_OpcodeName[161:165]: OpcodeLDBC,
	_OpcodeName[165:169]: OpcodeLDBD,
	_OpcodeName[169:173]: OpcodeLDBE,
	_OpcodeName[173:177]: OpcodeLDBH,
	_OpcodeName[177:181]: OpcodeLDBL,
	_OpcodeName[181:186]: OpcodeLDBHL,
	_OpcodeName[186:190]: OpcodeLDBA,
	_OpcodeName[190:194]: OpcodeLDCB,
	_OpcodeName[194:198]: OpcodeLDCC,
	_OpcodeName[198:202]: OpcodeLDCD,
	_OpcodeName[202:206]: OpcodeLDCE,
	_OpcodeName[206:210]: OpcodeLDCH,
	_OpcodeName[210:214]: OpcodeLDCL,
	_OpcodeName[214:219]: OpcodeLDCHL,
	_OpcodeName[219:223]: OpcodeLDCA,
	_OpcodeName[223:227]: OpcodeLDDB,
	_OpcodeName[227:231]: OpcodeLDDC,
	_OpcodeName[231:235]: OpcodeLDDD,
	_OpcodeName[235:239]: OpcodeLDDE,
	_OpcodeName[239:243]: OpcodeLDDH,
	_OpcodeName[243:247]: OpcodeLDDL,
	_OpcodeName[247:252]: OpcodeLDDHL,
	_OpcodeName[252:256]: OpcodeLDDA,
	_OpcodeName[256:260]: OpcodeLDEB,
	_OpcodeName[260:264]: OpcodeLDEC,
	_OpcodeName[264:268]: OpcodeLDED,
	_OpcodeName[268:272]: OpcodeLDEE,
	_OpcodeName[272:276]: OpcodeLDEH,
	_OpcodeName[276:280]: OpcodeLDEL,
	_OpcodeName[280:285]: OpcodeLDEHL,
	_OpcodeName[285:289]: OpcodeLDEA,
	_OpcodeName[289:293]: OpcodeLDHB,
	_OpcodeName[293:297]: OpcodeLDHC,
	_OpcodeName[297:301]: OpcodeLDHD,
	_OpcodeName[301:305]: OpcodeLDHE,
	_OpcodeName[305:309]: OpcodeLDHH,
	_OpcodeName[309:313]: OpcodeLDHL,
	_OpcodeName[313:318]: OpcodeLDHHL,
	_OpcodeName[318:322]: OpcodeLDHA,
	_OpcodeName[322:326]: OpcodeLDLB,
	_OpcodeName[326:330]: OpcodeLDLC,
	_OpcodeName[330:334]: OpcodeLDLD,
	_OpcodeName[334:338]: OpcodeLDLE,
	_OpcodeName[338:342]: OpcodeLDLH,
	_OpcodeName[342:346]: OpcodeLDLL,
	_OpcodeName[346:351]: OpcodeLDLHL,
	_OpcodeName[351:355]: OpcodeLDLA,
	_OpcodeName[355:360]: OpcodeLDHLB,
	_OpcodeName[360:365]: OpcodeLDHLC,
	_OpcodeName[365:370]: OpcodeLDHLD,
	_OpcodeName[370:375]: OpcodeLDHLE,
	_OpcodeName[375:380]: OpcodeLDHLH,
	_OpcodeName[380:385]: OpcodeLDHLL,
	_OpcodeName[385:389]: OpcodeHALT,
	_OpcodeName[389:394]: OpcodeLDHLA,
	_OpcodeName[394:398]: OpcodeLDAB,
	_OpcodeName[398:402]: OpcodeLDAC,
	_OpcodeName[402:406]: OpcodeLDAD,
	_OpcodeName[406:410]: OpcodeLDAE,
	_OpcodeName[410:414]: OpcodeLDAH,
	_OpcodeName[414:418]: OpcodeLDAL,
	_OpcodeName[418:423]: OpcodeLDAHL,
	_OpcodeName[423:427]: OpcodeLDAA,
	_OpcodeName[427:431]: OpcodeXORA,
	_OpcodeName[431:436]: OpcodePOPBC,
	_OpcodeName[436:442]: OpcodePUSHBC,
	_OpcodeName[442:445]: OpcodeRET,
	_OpcodeName[445:447]: OpcodeCB,
	_OpcodeName[447:453]: OpcodeCALLnn,
	_OpcodeName[453:458]: OpcodeLDHnA,
	_OpcodeName[458:463]: OpcodeLDHCA,
	_OpcodeName[463:468]: OpcodeLDnnA,
	_OpcodeName[468:473]: OpcodeLDHAn,
	_OpcodeName[473:475]: OpcodeDI,
	_OpcodeName[475:477]: OpcodeEI,
	_OpcodeName[477:480]: OpcodeCPn,
}

// ParseOpcode attempts to convert a string to a Opcode.
func ParseOpcode(name string) (Opcode, error) {
	if x, ok := _OpcodeValue[name]; ok {
		return x, nil
	}
	return Opcode(0), fmt.Errorf("%s is %w", name, ErrInvalidOpcode)
}

// MarshalText implements the text marshaller method.
func (x Opcode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Opcode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseOpcode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *Opcode) Set(val string) error {
	v, err := ParseOpcode(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Opcode) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Opcode) Type() string {
	return "Opcode"
}

const (
	CbRLC cb = iota
	CbRRC
	CbRL
	CbRR
	CbSLA
	CbSRA
	CbSWAP
	CbSRL
	CbBit0
	CbBit1
	CbBit2
	CbBit3
	CbBit4
	CbBit5
	CbBit6
	CbBit7
	CbRes0
	CbRes1
	CbRes2
	CbRes3
	CbRes4
	CbRes5
	CbRes6
	CbRes7
	CbSet0
	CbSet1
	CbSet2
	CbSet3
	CbSet4
	CbSet5
	CbSet6
	CbSet7
)

var ErrInvalidcb = errors.New("not a valid cb")

const _cbName = "RLCRRCRLRRSLASRASWAPSRLBit0Bit1Bit2Bit3Bit4Bit5Bit6Bit7Res0Res1Res2Res3Res4Res5Res6Res7Set0Set1Set2Set3Set4Set5Set6Set7"

// cbValues returns a list of the values for cb
func cbValues() []cb {
	return []cb{
		CbRLC,
		CbRRC,
		CbRL,
		CbRR,
		CbSLA,
		CbSRA,
		CbSWAP,
		CbSRL,
		CbBit0,
		CbBit1,
		CbBit2,
		CbBit3,
		CbBit4,
		CbBit5,
		CbBit6,
		CbBit7,
		CbRes0,
		CbRes1,
		CbRes2,
		CbRes3,
		CbRes4,
		CbRes5,
		CbRes6,
		CbRes7,
		CbSet0,
		CbSet1,
		CbSet2,
		CbSet3,
		CbSet4,
		CbSet5,
		CbSet6,
		CbSet7,
	}
}

var _cbMap = map[cb]string{
	CbRLC:  _cbName[0:3],
	CbRRC:  _cbName[3:6],
	CbRL:   _cbName[6:8],
	CbRR:   _cbName[8:10],
	CbSLA:  _cbName[10:13],
	CbSRA:  _cbName[13:16],
	CbSWAP: _cbName[16:20],
	CbSRL:  _cbName[20:23],
	CbBit0: _cbName[23:27],
	CbBit1: _cbName[27:31],
	CbBit2: _cbName[31:35],
	CbBit3: _cbName[35:39],
	CbBit4: _cbName[39:43],
	CbBit5: _cbName[43:47],
	CbBit6: _cbName[47:51],
	CbBit7: _cbName[51:55],
	CbRes0: _cbName[55:59],
	CbRes1: _cbName[59:63],
	CbRes2: _cbName[63:67],
	CbRes3: _cbName[67:71],
	CbRes4: _cbName[71:75],
	CbRes5: _cbName[75:79],
	CbRes6: _cbName[79:83],
	CbRes7: _cbName[83:87],
	CbSet0: _cbName[87:91],
	CbSet1: _cbName[91:95],
	CbSet2: _cbName[95:99],
	CbSet3: _cbName[99:103],
	CbSet4: _cbName[103:107],
	CbSet5: _cbName[107:111],
	CbSet6: _cbName[111:115],
	CbSet7: _cbName[115:119],
}

// String implements the Stringer interface.
func (x cb) String() string {
	if str, ok := _cbMap[x]; ok {
		return str
	}
	return fmt.Sprintf("cb(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x cb) IsValid() bool {
	_, ok := _cbMap[x]
	return ok
}

var _cbValue = map[string]cb{
	_cbName[0:3]:     CbRLC,
	_cbName[3:6]:     CbRRC,
	_cbName[6:8]:     CbRL,
	_cbName[8:10]:    CbRR,
	_cbName[10:13]:   CbSLA,
	_cbName[13:16]:   CbSRA,
	_cbName[16:20]:   CbSWAP,
	_cbName[20:23]:   CbSRL,
	_cbName[23:27]:   CbBit0,
	_cbName[27:31]:   CbBit1,
	_cbName[31:35]:   CbBit2,
	_cbName[35:39]:   CbBit3,
	_cbName[39:43]:   CbBit4,
	_cbName[43:47]:   CbBit5,
	_cbName[47:51]:   CbBit6,
	_cbName[51:55]:   CbBit7,
	_cbName[55:59]:   CbRes0,
	_cbName[59:63]:   CbRes1,
	_cbName[63:67]:   CbRes2,
	_cbName[67:71]:   CbRes3,
	_cbName[71:75]:   CbRes4,
	_cbName[75:79]:   CbRes5,
	_cbName[79:83]:   CbRes6,
	_cbName[83:87]:   CbRes7,
	_cbName[87:91]:   CbSet0,
	_cbName[91:95]:   CbSet1,
	_cbName[95:99]:   CbSet2,
	_cbName[99:103]:  CbSet3,
	_cbName[103:107]: CbSet4,
	_cbName[107:111]: CbSet5,
	_cbName[111:115]: CbSet6,
	_cbName[115:119]: CbSet7,
}

// Parsecb attempts to convert a string to a cb.
func Parsecb(name string) (cb, error) {
	if x, ok := _cbValue[name]; ok {
		return x, nil
	}
	return cb(0), fmt.Errorf("%s is %w", name, ErrInvalidcb)
}

// MarshalText implements the text marshaller method.
func (x cb) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *cb) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := Parsecb(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *cb) Set(val string) error {
	v, err := Parsecb(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *cb) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *cb) Type() string {
	return "cb"
}
