// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	ColorWhite Color = iota
	ColorLightGray
	ColorDarkGray
	ColorBlack
)

var ErrInvalidColor = errors.New("not a valid Color")

const _ColorName = "WhiteLightGrayDarkGrayBlack"

// ColorValues returns a list of the values for Color
func ColorValues() []Color {
	return []Color{
		ColorWhite,
		ColorLightGray,
		ColorDarkGray,
		ColorBlack,
	}
}

var _ColorMap = map[Color]string{
	ColorWhite:     _ColorName[0:5],
	ColorLightGray: _ColorName[5:14],
	ColorDarkGray:  _ColorName[14:22],
	ColorBlack:     _ColorName[22:27],
}

// String implements the Stringer interface.
func (x Color) String() string {
	if str, ok := _ColorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Color(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Color) IsValid() bool {
	_, ok := _ColorMap[x]
	return ok
}

var _ColorValue = map[string]Color{
	_ColorName[0:5]:   ColorWhite,
	_ColorName[5:14]:  ColorLightGray,
	_ColorName[14:22]: ColorDarkGray,
	_ColorName[22:27]: ColorBlack,
}

// ParseColor attempts to convert a string to a Color.
func ParseColor(name string) (Color, error) {
	if x, ok := _ColorValue[name]; ok {
		return x, nil
	}
	return Color(0), fmt.Errorf("%s is %w", name, ErrInvalidColor)
}

// MarshalText implements the text marshaller method.
func (x Color) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Color) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseColor(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *Color) Set(val string) error {
	v, err := ParseColor(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Color) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Color) Type() string {
	return "Color"
}
