package model

import (
	"fmt"
	"slices"
)

type HandlerV1 func(e int) bool
type InstructionHandling any

type CBOp struct {
	Op     cb
	Target CBTarget
}

func (cbv cb) Is3Cycles() bool {
	return slices.Contains([]cb{
		CbBit0,
		CbBit1,
		CbBit2,
		CbBit3,
		CbBit4,
		CbBit5,
		CbBit6,
		CbBit7,
	}, cbv)
}

func (cb CBOp) String() string {
	return fmt.Sprintf("%s %s", cb.Op, cb.Target)
}

func handlers(cpu *CPU) [256]InstructionHandling {
	return [256]InstructionHandling{
		OpcodeNop:      implNop,
		OpcodeLDAHLInc: implLDAHLInc,
		OpcodeLDAHLDec: implLDAHLDec,
		OpcodeLDAHL:    implLDAHL,
		OpcodeLDBHL:    implLDBHL,
		OpcodeLDCHL:    implLDCHL,
		OpcodeLDDHL:    implLDDHL,
		OpcodeLDEHL:    implLDEHL,
		OpcodeLDHHL:    implLDHHL,
		OpcodeLDLHL:    implLDLHL,
		OpcodeLDAA:     implLDAA,
		OpcodeLDAB:     implLDAB,
		OpcodeLDAC:     implLDAC,
		OpcodeLDAD:     implLDAD,
		OpcodeLDAE:     implLDAE,
		OpcodeLDAH:     implLDAH,
		OpcodeLDAL:     implLDAL,
		OpcodeLDBA:     implLDBA,
		OpcodeLDBB:     implLDBB,
		OpcodeLDBC:     implLDBC,
		OpcodeLDBD:     implLDBD,
		OpcodeLDBE:     implLDBE,
		OpcodeLDBH:     implLDBH,
		OpcodeLDBL:     implLDBL,
		OpcodeLDCA:     implLDCA,
		OpcodeLDCB:     implLDCB,
		OpcodeLDCC:     implLDCC,
		OpcodeLDCD:     implLDCD,
		OpcodeLDCE:     implLDCE,
		OpcodeLDCH:     implLDCH,
		OpcodeLDCL:     implLDCL,
		OpcodeLDDA:     implLDDA,
		OpcodeLDDB:     implLDDB,
		OpcodeLDDC:     implLDDC,
		OpcodeLDDD:     implLDDD,
		OpcodeLDDE:     implLDDE,
		OpcodeLDDH:     implLDDH,
		OpcodeLDDL:     implLDDL,
		OpcodeLDEA:     implLDEA,
		OpcodeLDEB:     implLDEB,
		OpcodeLDEC:     implLDEC,
		OpcodeLDED:     implLDED,
		OpcodeLDEE:     implLDEE,
		OpcodeLDEH:     implLDEH,
		OpcodeLDEL:     implLDEL,
		OpcodeLDHA:     implLDHA,
		OpcodeLDHB:     implLDHB,
		OpcodeLDHC:     implLDHC,
		OpcodeLDHD:     implLDHD,
		OpcodeLDHE:     implLDHE,
		OpcodeLDHH:     implLDHH,
		OpcodeLDHL:     implLDHL,
		OpcodeLDLA:     implLDLA,
		OpcodeLDLB:     implLDLB,
		OpcodeLDLC:     implLDLC,
		OpcodeLDLD:     implLDLD,
		OpcodeLDLE:     implLDLE,
		OpcodeLDLH:     implLDLH,
		OpcodeLDLL:     implLDLL,
		OpcodeRLA:      implRLA,
		OpcodeRRA:      implRRA,
		OpcodeRLCA:     implRLCA,
		OpcodeRRCA:     implRRCA,
		OpcodeORA:      implORA,
		OpcodeORB:      implORB,
		OpcodeORC:      implORC,
		OpcodeORD:      implORD,
		OpcodeORE:      implORE,
		OpcodeORH:      implORH,
		OpcodeORL:      implORL,
		OpcodeORHL:     implORHL,
		OpcodeANDA:     implANDA,
		OpcodeANDB:     implANDB,
		OpcodeANDC:     implANDC,
		OpcodeANDD:     implANDD,
		OpcodeANDE:     implANDE,
		OpcodeANDH:     implANDH,
		OpcodeANDL:     implANDL,
		OpcodeANDHL:    implANDHL,
		OpcodeXORA:     implXORA,
		OpcodeXORB:     implXORB,
		OpcodeXORC:     implXORC,
		OpcodeXORD:     implXORD,
		OpcodeXORE:     implXORE,
		OpcodeXORH:     implXORH,
		OpcodeXORL:     implXORL,
		OpcodeXORHL:    implXORHL,
		OpcodeSUBA:     implSUBA,
		OpcodeSUBB:     implSUBB,
		OpcodeSUBC:     implSUBC,
		OpcodeSUBD:     implSUBD,
		OpcodeSUBE:     implSUBE,
		OpcodeSUBH:     implSUBH,
		OpcodeSUBL:     implSUBL,
		OpcodeSUBHL:    implSUBHL,
		OpcodeSBCA:     implSBCA,
		OpcodeSBCB:     implSBCB,
		OpcodeSBCC:     implSBCC,
		OpcodeSBCD:     implSBCD,
		OpcodeSBCE:     implSBCE,
		OpcodeSBCH:     implSBCH,
		OpcodeSBCL:     implSBCL,
		OpcodeSBCHL:    implSBCHL,
		OpcodeCPA:      implCPA,
		OpcodeCPB:      implCPB,
		OpcodeCPC:      implCPC,
		OpcodeCPD:      implCPD,
		OpcodeCPE:      implCPE,
		OpcodeCPH:      implCPH,
		OpcodeCPL:      implCPL,
		OpcodeCPHL:     implCPHL,
		OpcodeADDA:     implADDA,
		OpcodeADDB:     implADDB,
		OpcodeADDC:     implADDC,
		OpcodeADDD:     implADDD,
		OpcodeADDE:     implADDE,
		OpcodeADDH:     implADDH,
		OpcodeADDL:     implADDL,
		OpcodeADDHL:    implADDHL,
		OpcodeADDSPe:   implADDSPe,
		OpcodeADCA:     implADCA,
		OpcodeADCB:     implADCB,
		OpcodeADCC:     implADCC,
		OpcodeADCD:     implADCD,
		OpcodeADCE:     implADCE,
		OpcodeADCH:     implADCH,
		OpcodeADCL:     implADCL,
		OpcodeADCHL:    implADCHL,
		OpcodeDAA:      implDAA,
		OpcodeCPLaka2f: implCPLaka2f,
		OpcodeCCF:      implCCF,
		OpcodeSCF:      implSCF,
		OpcodeDECA:     implDECA,
		OpcodeDECB:     implDECB,
		OpcodeDECC:     implDECC,
		OpcodeDECD:     implDECD,
		OpcodeDECE:     implDECE,
		OpcodeDECH:     implDECH,
		OpcodeDECL:     implDECL,
		OpcodeINCA:     implINCA,
		OpcodeINCB:     implINCB,
		OpcodeINCC:     implINCC,
		OpcodeINCD:     implINCD,
		OpcodeINCE:     implINCE,
		OpcodeINCH:     implINCH,
		OpcodeINCL:     implINCL,
		OpcodeINCHLInd: implINCHLInd,
		OpcodeDECHLInd: implDECHLInd,
		OpcodeDI:       implDI,
		OpcodeEI:       implEI,
		OpcodeHALT:     implHALT,
		OpcodeJRe:      implJRe,
		OpcodeJPnn:     implJPnn,
		OpcodeJPHL:     implJPHL,
		OpcodeJRZe:     implJRZe,
		OpcodeJRCe:     implJRCe,
		OpcodeJRNZe:    implJRNZe,
		OpcodeJRNCe:    implJRNCe,
		OpcodeJPCnn:    implJPCnn,
		OpcodeJPNCnn:   implJPNCnn,
		OpcodeJPZnn:    implJPZnn,
		OpcodeJPNZnn:   implJPNZnn,
		OpcodeINCBC:    implINCBC,
		OpcodeINCDE:    implINCDE,
		OpcodeINCHL:    implINCHL,
		OpcodeINCSP:    implINCSP,
		OpcodeDECBC:    implDECBC,
		OpcodeDECDE:    implDECDE,
		OpcodeDECHL:    implDECHL,
		OpcodeDECSP:    implDECSP,
		OpcodeCALLnn:   implCALLnn,
		OpcodeCALLNZnn: implCALLNZnn,
		OpcodeCALLZnn:  implCALLZnn,
		OpcodeCALLNCnn: implCALLNCnn,
		OpcodeCALLCnn:  implCALLCnn,
		OpcodeRET:      implRET,
		OpcodeRETI:     implRETI,
		OpcodeRETZ:     implRETZ,
		OpcodeRETNZ:    implRETNZ,
		OpcodeRETC:     implRETC,
		OpcodeRETNC:    implRETNC,
		OpcodePUSHBC:   implPUSHBC,
		OpcodePUSHDE:   implPUSHDE,
		OpcodePUSHHL:   implPUSHHL,
		OpcodePUSHAF:   implPUSHAF,
		OpcodePOPBC:    implPOPBC,
		OpcodePOPDE:    implPOPDE,
		OpcodePOPHL:    implPOPHL,
		OpcodePOPAF:    implPOPAF,
		OpcodeADDHLHL:  implADDHLHL,
		OpcodeADDHLBC:  implADDHLBC,
		OpcodeADDHLDE:  implADDHLDE,
		OpcodeADDHLSP:  implADDHLSP,
		OpcodeLDBCnn:   implLDBCnn,
		OpcodeLDDEnn:   implLDDEnn,
		OpcodeLDHLnn:   implLDHLnn,
		OpcodeLDSPnn:   implLDSPnn,
		OpcodeLDHLn:    implLDHLn,
		OpcodeLDHLSPe:  implLDHLSPe,
		OpcodeLDSPHL:   implLDSPHL,
		OpcodeLDHLAInc: implLDHLAInc,
		OpcodeLDHLADec: implLDHLADec,
		OpcodeLDHLA:    implLDHLA,
		OpcodeLDHLB:    implLDHLB,
		OpcodeLDHLC:    implLDHLC,
		OpcodeLDHLD:    implLDHLD,
		OpcodeLDHLE:    implLDHLE,
		OpcodeLDHLH:    implLDHLH,
		OpcodeLDHLL:    implLDHLL,
		OpcodeLDBCA:    implLDBCA,
		OpcodeLDDEA:    implLDDEA,
		OpcodeLDHCA:    implLDHCA,
		OpcodeLDHAC:    implLDHAC,
		OpcodeLDnnSP:   implLDnnSP,
		OpcodeLDnnA:    implLDnnA,
		OpcodeLDAnn:    implLDAnn,
		OpcodeCPn:      implCPn,
		OpcodeSUBn:     implSUBn,
		OpcodeORn:      implORn,
		OpcodeANDn:     implANDn,
		OpcodeADDn:     implADDn,
		OpcodeADCn:     implADCn,
		OpcodeSBCn:     implSBCn,
		OpcodeXORn:     implXORn,
		OpcodeLDHnA:    implLDHnA,
		OpcodeLDHAn:    implLDHAn,
		OpcodeLDADE:    implLDADE,
		OpcodeLDABC:    implLDABC,
		OpcodeLDAn:     implLDAn,
		OpcodeLDBn:     implLDBn,
		OpcodeLDCn:     implLDCn,
		OpcodeLDDn:     implLDDn,
		OpcodeLDEn:     implLDEn,
		OpcodeLDHn:     implLDHn,
		OpcodeLDLn:     implLDLn,
		OpcodeCB:       implCB,
		OpcodeRST0x00:  implRST0x00,
		OpcodeRST0x08:  implRST0x08,
		OpcodeRST0x10:  implRST0x10,
		OpcodeRST0x18:  implRST0x18,
		OpcodeRST0x20:  implRST0x20,
		OpcodeRST0x28:  implRST0x28,
		OpcodeRST0x30:  implRST0x30,
		OpcodeRST0x38:  implRST0x38,
		OpcodeUndefD3:  implUndefined,
		OpcodeUndefDB:  implUndefined,
		OpcodeUndefDD:  implUndefined,
		OpcodeUndefE3:  implUndefined,
		OpcodeUndefE4:  implUndefined,
		OpcodeUndefEB:  implUndefined,
		OpcodeUndefEC:  implUndefined,
		OpcodeUndefED:  implUndefined,
		OpcodeUndefF4:  implUndefined,
		OpcodeUndefFC:  implUndefined,
		OpcodeUndefFD:  implUndefined,
	}
}
