// Code generated by go-enum DO NOT EDIT.
// Version: 0.7.0
// Revision: 0979fc7bd6297900cf7c4b903f1d4b0d174537c7
// Build Date: 2025-06-17T15:19:50Z
// Built By: goreleaser

package model

import (
	"errors"
	"fmt"
)

const (
	AddrZero              Addr = iota
	AddrBootROMEnd        Addr = iota + 254
	AddrCartridgeBank0End Addr = iota + 16381
	AddrCartridgeBankNBegin
	AddrCartridgeBankNEnd Addr = iota + 32763
	AddrTileDataBegin
	AddrTileDataEnd Addr = iota + 38905
	AddrTileMap0Begin
	AddrTileMap0End Addr = iota + 39927
	AddrTileMap1Begin
	AddrTileMap1End Addr = iota + 40949
	AddrRAMBegin
	AddrRAMEnd Addr = iota + 49139
	AddrWRAMBegin
	AddrWRAMEnd Addr = iota + 57329
	AddrEchoRAMBegin
	AddrEchoRAMEnd Addr = iota + 65007
	AddrOAMBegin
	AddrOAMEnd Addr = iota + 65165
	AddrProhibitedBegin
	AddrProhibitedEnd Addr = iota + 65259
	AddrP1
	AddrSB
	AddrSC
	AddrDIV Addr = iota + 65260
	AddrTIMA
	AddrTMA
	AddrTAC
	AddrIF   Addr = iota + 65267
	AddrLCDC Addr = iota + 65315
	AddrSTAT
	AddrSCY
	AddrSCX
	AddrLY
	AddrLYC
	AddrDMA
	AddrBGP
	AddrOBP0
	AddrOBP1
	AddrWY
	AddrWX
	AddrNR10 Addr = iota + 65255
	AddrNR11
	AddrNR12
	AddrNR13
	AddrNR14
	AddrNR21 Addr = iota + 65256
	AddrNR22
	AddrNR23
	AddrNR24
	AddrNR30
	AddrNR31
	AddrNR32
	AddrNR33
	AddrNR34
	AddrNR41 Addr = iota + 65257
	AddrNR42
	AddrNR43
	AddrNR44
	AddrNR50
	AddrNR51
	AddrNR52
	AddrBootROMLock Addr = iota + 65298
	AddrHRAMBegin   Addr = iota + 65345
	AddrHRAMEnd     Addr = iota + 65470
	AddrIE
)

var ErrInvalidAddr = errors.New("not a valid Addr")

const _AddrName = "ZeroBootROMEndCartridgeBank0EndCartridgeBankNBeginCartridgeBankNEndTileDataBeginTileDataEndTileMap0BeginTileMap0EndTileMap1BeginTileMap1EndRAMBeginRAMEndWRAMBeginWRAMEndEchoRAMBeginEchoRAMEndOAMBeginOAMEndProhibitedBeginProhibitedEndP1SBSCDIVTIMATMATACIFLCDCSTATSCYSCXLYLYCDMABGPOBP0OBP1WYWXNR10NR11NR12NR13NR14NR21NR22NR23NR24NR30NR31NR32NR33NR34NR41NR42NR43NR44NR50NR51NR52BootROMLockHRAMBeginHRAMEndIE"

var _AddrMap = map[Addr]string{
	AddrZero:                _AddrName[0:4],
	AddrBootROMEnd:          _AddrName[4:14],
	AddrCartridgeBank0End:   _AddrName[14:31],
	AddrCartridgeBankNBegin: _AddrName[31:50],
	AddrCartridgeBankNEnd:   _AddrName[50:67],
	AddrTileDataBegin:       _AddrName[67:80],
	AddrTileDataEnd:         _AddrName[80:91],
	AddrTileMap0Begin:       _AddrName[91:104],
	AddrTileMap0End:         _AddrName[104:115],
	AddrTileMap1Begin:       _AddrName[115:128],
	AddrTileMap1End:         _AddrName[128:139],
	AddrRAMBegin:            _AddrName[139:147],
	AddrRAMEnd:              _AddrName[147:153],
	AddrWRAMBegin:           _AddrName[153:162],
	AddrWRAMEnd:             _AddrName[162:169],
	AddrEchoRAMBegin:        _AddrName[169:181],
	AddrEchoRAMEnd:          _AddrName[181:191],
	AddrOAMBegin:            _AddrName[191:199],
	AddrOAMEnd:              _AddrName[199:205],
	AddrProhibitedBegin:     _AddrName[205:220],
	AddrProhibitedEnd:       _AddrName[220:233],
	AddrP1:                  _AddrName[233:235],
	AddrSB:                  _AddrName[235:237],
	AddrSC:                  _AddrName[237:239],
	AddrDIV:                 _AddrName[239:242],
	AddrTIMA:                _AddrName[242:246],
	AddrTMA:                 _AddrName[246:249],
	AddrTAC:                 _AddrName[249:252],
	AddrIF:                  _AddrName[252:254],
	AddrLCDC:                _AddrName[254:258],
	AddrSTAT:                _AddrName[258:262],
	AddrSCY:                 _AddrName[262:265],
	AddrSCX:                 _AddrName[265:268],
	AddrLY:                  _AddrName[268:270],
	AddrLYC:                 _AddrName[270:273],
	AddrDMA:                 _AddrName[273:276],
	AddrBGP:                 _AddrName[276:279],
	AddrOBP0:                _AddrName[279:283],
	AddrOBP1:                _AddrName[283:287],
	AddrWY:                  _AddrName[287:289],
	AddrWX:                  _AddrName[289:291],
	AddrNR10:                _AddrName[291:295],
	AddrNR11:                _AddrName[295:299],
	AddrNR12:                _AddrName[299:303],
	AddrNR13:                _AddrName[303:307],
	AddrNR14:                _AddrName[307:311],
	AddrNR21:                _AddrName[311:315],
	AddrNR22:                _AddrName[315:319],
	AddrNR23:                _AddrName[319:323],
	AddrNR24:                _AddrName[323:327],
	AddrNR30:                _AddrName[327:331],
	AddrNR31:                _AddrName[331:335],
	AddrNR32:                _AddrName[335:339],
	AddrNR33:                _AddrName[339:343],
	AddrNR34:                _AddrName[343:347],
	AddrNR41:                _AddrName[347:351],
	AddrNR42:                _AddrName[351:355],
	AddrNR43:                _AddrName[355:359],
	AddrNR44:                _AddrName[359:363],
	AddrNR50:                _AddrName[363:367],
	AddrNR51:                _AddrName[367:371],
	AddrNR52:                _AddrName[371:375],
	AddrBootROMLock:         _AddrName[375:386],
	AddrHRAMBegin:           _AddrName[386:395],
	AddrHRAMEnd:             _AddrName[395:402],
	AddrIE:                  _AddrName[402:404],
}

// String implements the Stringer interface.
func (x Addr) String() string {
	if str, ok := _AddrMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Addr(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Addr) IsValid() bool {
	_, ok := _AddrMap[x]
	return ok
}

var _AddrValue = map[string]Addr{
	_AddrName[0:4]:     AddrZero,
	_AddrName[4:14]:    AddrBootROMEnd,
	_AddrName[14:31]:   AddrCartridgeBank0End,
	_AddrName[31:50]:   AddrCartridgeBankNBegin,
	_AddrName[50:67]:   AddrCartridgeBankNEnd,
	_AddrName[67:80]:   AddrTileDataBegin,
	_AddrName[80:91]:   AddrTileDataEnd,
	_AddrName[91:104]:  AddrTileMap0Begin,
	_AddrName[104:115]: AddrTileMap0End,
	_AddrName[115:128]: AddrTileMap1Begin,
	_AddrName[128:139]: AddrTileMap1End,
	_AddrName[139:147]: AddrRAMBegin,
	_AddrName[147:153]: AddrRAMEnd,
	_AddrName[153:162]: AddrWRAMBegin,
	_AddrName[162:169]: AddrWRAMEnd,
	_AddrName[169:181]: AddrEchoRAMBegin,
	_AddrName[181:191]: AddrEchoRAMEnd,
	_AddrName[191:199]: AddrOAMBegin,
	_AddrName[199:205]: AddrOAMEnd,
	_AddrName[205:220]: AddrProhibitedBegin,
	_AddrName[220:233]: AddrProhibitedEnd,
	_AddrName[233:235]: AddrP1,
	_AddrName[235:237]: AddrSB,
	_AddrName[237:239]: AddrSC,
	_AddrName[239:242]: AddrDIV,
	_AddrName[242:246]: AddrTIMA,
	_AddrName[246:249]: AddrTMA,
	_AddrName[249:252]: AddrTAC,
	_AddrName[252:254]: AddrIF,
	_AddrName[254:258]: AddrLCDC,
	_AddrName[258:262]: AddrSTAT,
	_AddrName[262:265]: AddrSCY,
	_AddrName[265:268]: AddrSCX,
	_AddrName[268:270]: AddrLY,
	_AddrName[270:273]: AddrLYC,
	_AddrName[273:276]: AddrDMA,
	_AddrName[276:279]: AddrBGP,
	_AddrName[279:283]: AddrOBP0,
	_AddrName[283:287]: AddrOBP1,
	_AddrName[287:289]: AddrWY,
	_AddrName[289:291]: AddrWX,
	_AddrName[291:295]: AddrNR10,
	_AddrName[295:299]: AddrNR11,
	_AddrName[299:303]: AddrNR12,
	_AddrName[303:307]: AddrNR13,
	_AddrName[307:311]: AddrNR14,
	_AddrName[311:315]: AddrNR21,
	_AddrName[315:319]: AddrNR22,
	_AddrName[319:323]: AddrNR23,
	_AddrName[323:327]: AddrNR24,
	_AddrName[327:331]: AddrNR30,
	_AddrName[331:335]: AddrNR31,
	_AddrName[335:339]: AddrNR32,
	_AddrName[339:343]: AddrNR33,
	_AddrName[343:347]: AddrNR34,
	_AddrName[347:351]: AddrNR41,
	_AddrName[351:355]: AddrNR42,
	_AddrName[355:359]: AddrNR43,
	_AddrName[359:363]: AddrNR44,
	_AddrName[363:367]: AddrNR50,
	_AddrName[367:371]: AddrNR51,
	_AddrName[371:375]: AddrNR52,
	_AddrName[375:386]: AddrBootROMLock,
	_AddrName[386:395]: AddrHRAMBegin,
	_AddrName[395:402]: AddrHRAMEnd,
	_AddrName[402:404]: AddrIE,
}

// ParseAddr attempts to convert a string to a Addr.
func ParseAddr(name string) (Addr, error) {
	if x, ok := _AddrValue[name]; ok {
		return x, nil
	}
	return Addr(0), fmt.Errorf("%s is %w", name, ErrInvalidAddr)
}

// MarshalText implements the text marshaller method.
func (x Addr) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Addr) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseAddr(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *Addr) Set(val string) error {
	v, err := ParseAddr(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Addr) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Addr) Type() string {
	return "Addr"
}
