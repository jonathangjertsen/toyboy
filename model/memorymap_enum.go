// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	AddrP1 Addr = iota + 65280
	AddrSB
	AddrSC
	AddrDIV Addr = iota + 65281
	AddrTIMA
	AddrTMA
	AddrTAC
	AddrIF   Addr = iota + 65288
	AddrLCDC Addr = iota + 65336
	AddrSTAT
	AddrSCY
	AddrSCX
	AddrLY
	AddrLYC
	AddrDMA
	AddrBGP
	AddrOBP0
	AddrOBP1
	AddrWY
	AddrWX
	AddrNR10 Addr = iota + 65276
	AddrNR11
	AddrNR12
	AddrNR13
	AddrNR14
	AddrNR21 Addr = iota + 65277
	AddrNR22
	AddrNR23
	AddrNR24
	AddrNR30
	AddrNR31
	AddrNR32
	AddrNR33
	AddrNR34
	AddrNR41 Addr = iota + 65278
	AddrNR42
	AddrNR43
	AddrNR44
	AddrNR50
	AddrNR51
	AddrNR52
)

var ErrInvalidAddr = errors.New("not a valid Addr")

const _AddrName = "P1SBSCDIVTIMATMATACIFLCDCSTATSCYSCXLYLYCDMABGPOBP0OBP1WYWXNR10NR11NR12NR13NR14NR21NR22NR23NR24NR30NR31NR32NR33NR34NR41NR42NR43NR44NR50NR51NR52"

// AddrValues returns a list of the values for Addr
func AddrValues() []Addr {
	return []Addr{
		AddrP1,
		AddrSB,
		AddrSC,
		AddrDIV,
		AddrTIMA,
		AddrTMA,
		AddrTAC,
		AddrIF,
		AddrLCDC,
		AddrSTAT,
		AddrSCY,
		AddrSCX,
		AddrLY,
		AddrLYC,
		AddrDMA,
		AddrBGP,
		AddrOBP0,
		AddrOBP1,
		AddrWY,
		AddrWX,
		AddrNR10,
		AddrNR11,
		AddrNR12,
		AddrNR13,
		AddrNR14,
		AddrNR21,
		AddrNR22,
		AddrNR23,
		AddrNR24,
		AddrNR30,
		AddrNR31,
		AddrNR32,
		AddrNR33,
		AddrNR34,
		AddrNR41,
		AddrNR42,
		AddrNR43,
		AddrNR44,
		AddrNR50,
		AddrNR51,
		AddrNR52,
	}
}

var _AddrMap = map[Addr]string{
	AddrP1:   _AddrName[0:2],
	AddrSB:   _AddrName[2:4],
	AddrSC:   _AddrName[4:6],
	AddrDIV:  _AddrName[6:9],
	AddrTIMA: _AddrName[9:13],
	AddrTMA:  _AddrName[13:16],
	AddrTAC:  _AddrName[16:19],
	AddrIF:   _AddrName[19:21],
	AddrLCDC: _AddrName[21:25],
	AddrSTAT: _AddrName[25:29],
	AddrSCY:  _AddrName[29:32],
	AddrSCX:  _AddrName[32:35],
	AddrLY:   _AddrName[35:37],
	AddrLYC:  _AddrName[37:40],
	AddrDMA:  _AddrName[40:43],
	AddrBGP:  _AddrName[43:46],
	AddrOBP0: _AddrName[46:50],
	AddrOBP1: _AddrName[50:54],
	AddrWY:   _AddrName[54:56],
	AddrWX:   _AddrName[56:58],
	AddrNR10: _AddrName[58:62],
	AddrNR11: _AddrName[62:66],
	AddrNR12: _AddrName[66:70],
	AddrNR13: _AddrName[70:74],
	AddrNR14: _AddrName[74:78],
	AddrNR21: _AddrName[78:82],
	AddrNR22: _AddrName[82:86],
	AddrNR23: _AddrName[86:90],
	AddrNR24: _AddrName[90:94],
	AddrNR30: _AddrName[94:98],
	AddrNR31: _AddrName[98:102],
	AddrNR32: _AddrName[102:106],
	AddrNR33: _AddrName[106:110],
	AddrNR34: _AddrName[110:114],
	AddrNR41: _AddrName[114:118],
	AddrNR42: _AddrName[118:122],
	AddrNR43: _AddrName[122:126],
	AddrNR44: _AddrName[126:130],
	AddrNR50: _AddrName[130:134],
	AddrNR51: _AddrName[134:138],
	AddrNR52: _AddrName[138:142],
}

// String implements the Stringer interface.
func (x Addr) String() string {
	if str, ok := _AddrMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Addr(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Addr) IsValid() bool {
	_, ok := _AddrMap[x]
	return ok
}

var _AddrValue = map[string]Addr{
	_AddrName[0:2]:     AddrP1,
	_AddrName[2:4]:     AddrSB,
	_AddrName[4:6]:     AddrSC,
	_AddrName[6:9]:     AddrDIV,
	_AddrName[9:13]:    AddrTIMA,
	_AddrName[13:16]:   AddrTMA,
	_AddrName[16:19]:   AddrTAC,
	_AddrName[19:21]:   AddrIF,
	_AddrName[21:25]:   AddrLCDC,
	_AddrName[25:29]:   AddrSTAT,
	_AddrName[29:32]:   AddrSCY,
	_AddrName[32:35]:   AddrSCX,
	_AddrName[35:37]:   AddrLY,
	_AddrName[37:40]:   AddrLYC,
	_AddrName[40:43]:   AddrDMA,
	_AddrName[43:46]:   AddrBGP,
	_AddrName[46:50]:   AddrOBP0,
	_AddrName[50:54]:   AddrOBP1,
	_AddrName[54:56]:   AddrWY,
	_AddrName[56:58]:   AddrWX,
	_AddrName[58:62]:   AddrNR10,
	_AddrName[62:66]:   AddrNR11,
	_AddrName[66:70]:   AddrNR12,
	_AddrName[70:74]:   AddrNR13,
	_AddrName[74:78]:   AddrNR14,
	_AddrName[78:82]:   AddrNR21,
	_AddrName[82:86]:   AddrNR22,
	_AddrName[86:90]:   AddrNR23,
	_AddrName[90:94]:   AddrNR24,
	_AddrName[94:98]:   AddrNR30,
	_AddrName[98:102]:  AddrNR31,
	_AddrName[102:106]: AddrNR32,
	_AddrName[106:110]: AddrNR33,
	_AddrName[110:114]: AddrNR34,
	_AddrName[114:118]: AddrNR41,
	_AddrName[118:122]: AddrNR42,
	_AddrName[122:126]: AddrNR43,
	_AddrName[126:130]: AddrNR44,
	_AddrName[130:134]: AddrNR50,
	_AddrName[134:138]: AddrNR51,
	_AddrName[138:142]: AddrNR52,
}

// ParseAddr attempts to convert a string to a Addr.
func ParseAddr(name string) (Addr, error) {
	if x, ok := _AddrValue[name]; ok {
		return x, nil
	}
	return Addr(0), fmt.Errorf("%s is %w", name, ErrInvalidAddr)
}

// MarshalText implements the text marshaller method.
func (x Addr) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Addr) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseAddr(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *Addr) Set(val string) error {
	v, err := ParseAddr(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Addr) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Addr) Type() string {
	return "Addr"
}
