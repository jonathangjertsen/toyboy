// Code generated by go-enum DO NOT EDIT.
// Version: 0.7.0
// Revision: 0979fc7bd6297900cf7c4b903f1d4b0d174537c7
// Build Date: 2025-06-17T15:19:50Z
// Built By: goreleaser

package model

import (
	"errors"
	"fmt"
)

const (
	IntSourceVBlank IntSource = iota + 1
	IntSourceLCD
	IntSourceTimer
	IntSourceSerial
	IntSourceJoypad
)

var ErrInvalidIntSource = errors.New("not a valid IntSource")

const _IntSourceName = "VBlankLCDTimerSerialJoypad"

// IntSourceValues returns a list of the values for IntSource
func IntSourceValues() []IntSource {
	return []IntSource{
		IntSourceVBlank,
		IntSourceLCD,
		IntSourceTimer,
		IntSourceSerial,
		IntSourceJoypad,
	}
}

var _IntSourceMap = map[IntSource]string{
	IntSourceVBlank: _IntSourceName[0:6],
	IntSourceLCD:    _IntSourceName[6:9],
	IntSourceTimer:  _IntSourceName[9:14],
	IntSourceSerial: _IntSourceName[14:20],
	IntSourceJoypad: _IntSourceName[20:26],
}

// String implements the Stringer interface.
func (x IntSource) String() string {
	if str, ok := _IntSourceMap[x]; ok {
		return str
	}
	return fmt.Sprintf("IntSource(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IntSource) IsValid() bool {
	_, ok := _IntSourceMap[x]
	return ok
}

var _IntSourceValue = map[string]IntSource{
	_IntSourceName[0:6]:   IntSourceVBlank,
	_IntSourceName[6:9]:   IntSourceLCD,
	_IntSourceName[9:14]:  IntSourceTimer,
	_IntSourceName[14:20]: IntSourceSerial,
	_IntSourceName[20:26]: IntSourceJoypad,
}

// ParseIntSource attempts to convert a string to a IntSource.
func ParseIntSource(name string) (IntSource, error) {
	if x, ok := _IntSourceValue[name]; ok {
		return x, nil
	}
	return IntSource(0), fmt.Errorf("%s is %w", name, ErrInvalidIntSource)
}

// MarshalText implements the text marshaller method.
func (x IntSource) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *IntSource) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseIntSource(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *IntSource) Set(val string) error {
	v, err := ParseIntSource(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *IntSource) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *IntSource) Type() string {
	return "IntSource"
}
