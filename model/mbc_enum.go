// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.0
// Revision: 4061a5d82779342c5863a515363feb943fa59455
// Build Date: 2025-07-22T03:42:20Z
// Built By: goreleaser

package model

import (
	"errors"
	"fmt"
)

const (
	MBCIDNone MBCID = iota
	MBCID1
	MBCID2
	MBCID3
	MBCIDMMM01
	MBCID5
	MBCID6
	MBCID7
	MBCIDPocketCamera
	MBCIDBandaiTAMA5
	MBCIDHuC3
	MBCIDHuC1
)

var ErrInvalidMBCID = errors.New("not a valid MBCID")

const _MBCIDName = "None123MMM01567PocketCameraBandaiTAMA5HuC3HuC1"

var _MBCIDMap = map[MBCID]string{
	MBCIDNone:         _MBCIDName[0:4],
	MBCID1:            _MBCIDName[4:5],
	MBCID2:            _MBCIDName[5:6],
	MBCID3:            _MBCIDName[6:7],
	MBCIDMMM01:        _MBCIDName[7:12],
	MBCID5:            _MBCIDName[12:13],
	MBCID6:            _MBCIDName[13:14],
	MBCID7:            _MBCIDName[14:15],
	MBCIDPocketCamera: _MBCIDName[15:27],
	MBCIDBandaiTAMA5:  _MBCIDName[27:38],
	MBCIDHuC3:         _MBCIDName[38:42],
	MBCIDHuC1:         _MBCIDName[42:46],
}

// String implements the Stringer interface.
func (x MBCID) String() string {
	if str, ok := _MBCIDMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MBCID(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MBCID) IsValid() bool {
	_, ok := _MBCIDMap[x]
	return ok
}

var _MBCIDValue = map[string]MBCID{
	_MBCIDName[0:4]:   MBCIDNone,
	_MBCIDName[4:5]:   MBCID1,
	_MBCIDName[5:6]:   MBCID2,
	_MBCIDName[6:7]:   MBCID3,
	_MBCIDName[7:12]:  MBCIDMMM01,
	_MBCIDName[12:13]: MBCID5,
	_MBCIDName[13:14]: MBCID6,
	_MBCIDName[14:15]: MBCID7,
	_MBCIDName[15:27]: MBCIDPocketCamera,
	_MBCIDName[27:38]: MBCIDBandaiTAMA5,
	_MBCIDName[38:42]: MBCIDHuC3,
	_MBCIDName[42:46]: MBCIDHuC1,
}

// ParseMBCID attempts to convert a string to a MBCID.
func ParseMBCID(name string) (MBCID, error) {
	if x, ok := _MBCIDValue[name]; ok {
		return x, nil
	}
	return MBCID(0), fmt.Errorf("%s is %w", name, ErrInvalidMBCID)
}

// Set implements the Golang flag.Value interface func.
func (x *MBCID) Set(val string) error {
	v, err := ParseMBCID(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *MBCID) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *MBCID) Type() string {
	return "MBCID"
}
