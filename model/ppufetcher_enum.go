// Code generated by go-enum DO NOT EDIT.
// Version: 0.7.0
// Revision: 0979fc7bd6297900cf7c4b903f1d4b0d174537c7
// Build Date: 2025-06-17T15:19:50Z
// Built By: goreleaser

package model

import (
	"errors"
	"fmt"
)

const (
	FetcherStateFetchTileNo FetcherState = iota
	FetcherStateFetchTileLSB
	FetcherStateFetchTileMSB
	FetcherStatePushFIFO
)

var ErrInvalidFetcherState = errors.New("not a valid FetcherState")

const _FetcherStateName = "FetchTileNoFetchTileLSBFetchTileMSBPushFIFO"

// FetcherStateValues returns a list of the values for FetcherState
func FetcherStateValues() []FetcherState {
	return []FetcherState{
		FetcherStateFetchTileNo,
		FetcherStateFetchTileLSB,
		FetcherStateFetchTileMSB,
		FetcherStatePushFIFO,
	}
}

var _FetcherStateMap = map[FetcherState]string{
	FetcherStateFetchTileNo:  _FetcherStateName[0:11],
	FetcherStateFetchTileLSB: _FetcherStateName[11:23],
	FetcherStateFetchTileMSB: _FetcherStateName[23:35],
	FetcherStatePushFIFO:     _FetcherStateName[35:43],
}

// String implements the Stringer interface.
func (x FetcherState) String() string {
	if str, ok := _FetcherStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FetcherState(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FetcherState) IsValid() bool {
	_, ok := _FetcherStateMap[x]
	return ok
}

var _FetcherStateValue = map[string]FetcherState{
	_FetcherStateName[0:11]:  FetcherStateFetchTileNo,
	_FetcherStateName[11:23]: FetcherStateFetchTileLSB,
	_FetcherStateName[23:35]: FetcherStateFetchTileMSB,
	_FetcherStateName[35:43]: FetcherStatePushFIFO,
}

// ParseFetcherState attempts to convert a string to a FetcherState.
func ParseFetcherState(name string) (FetcherState, error) {
	if x, ok := _FetcherStateValue[name]; ok {
		return x, nil
	}
	return FetcherState(0), fmt.Errorf("%s is %w", name, ErrInvalidFetcherState)
}

// MarshalText implements the text marshaller method.
func (x FetcherState) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *FetcherState) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseFetcherState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *FetcherState) Set(val string) error {
	v, err := ParseFetcherState(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *FetcherState) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *FetcherState) Type() string {
	return "FetcherState"
}
