package model

// Can use either a jump table or a switch statement; profile to see which is faster

// Jump table:

var Handlers = [256]CycleHandler{
	OpcodeNop:      implNop,
	OpcodeLDAHLInc: implLDAHLInc,
	OpcodeLDAHLDec: implLDAHLDec,
	OpcodeLDAHL:    implLDAHL,
	OpcodeLDBHL:    implLDBHL,
	OpcodeLDCHL:    implLDCHL,
	OpcodeLDDHL:    implLDDHL,
	OpcodeLDEHL:    implLDEHL,
	OpcodeLDHHL:    implLDHHL,
	OpcodeLDLHL:    implLDLHL,
	OpcodeLDAA:     implLDAA,
	OpcodeLDAB:     implLDAB,
	OpcodeLDAC:     implLDAC,
	OpcodeLDAD:     implLDAD,
	OpcodeLDAE:     implLDAE,
	OpcodeLDAH:     implLDAH,
	OpcodeLDAL:     implLDAL,
	OpcodeLDBA:     implLDBA,
	OpcodeLDBB:     implLDBB,
	OpcodeLDBC:     implLDBC,
	OpcodeLDBD:     implLDBD,
	OpcodeLDBE:     implLDBE,
	OpcodeLDBH:     implLDBH,
	OpcodeLDBL:     implLDBL,
	OpcodeLDCA:     implLDCA,
	OpcodeLDCB:     implLDCB,
	OpcodeLDCC:     implLDCC,
	OpcodeLDCD:     implLDCD,
	OpcodeLDCE:     implLDCE,
	OpcodeLDCH:     implLDCH,
	OpcodeLDCL:     implLDCL,
	OpcodeLDDA:     implLDDA,
	OpcodeLDDB:     implLDDB,
	OpcodeLDDC:     implLDDC,
	OpcodeLDDD:     implLDDD,
	OpcodeLDDE:     implLDDE,
	OpcodeLDDH:     implLDDH,
	OpcodeLDDL:     implLDDL,
	OpcodeLDEA:     implLDEA,
	OpcodeLDEB:     implLDEB,
	OpcodeLDEC:     implLDEC,
	OpcodeLDED:     implLDED,
	OpcodeLDEE:     implLDEE,
	OpcodeLDEH:     implLDEH,
	OpcodeLDEL:     implLDEL,
	OpcodeLDHA:     implLDHA,
	OpcodeLDHB:     implLDHB,
	OpcodeLDHC:     implLDHC,
	OpcodeLDHD:     implLDHD,
	OpcodeLDHE:     implLDHE,
	OpcodeLDHH:     implLDHH,
	OpcodeLDHL:     implLDHL,
	OpcodeLDLA:     implLDLA,
	OpcodeLDLB:     implLDLB,
	OpcodeLDLC:     implLDLC,
	OpcodeLDLD:     implLDLD,
	OpcodeLDLE:     implLDLE,
	OpcodeLDLH:     implLDLH,
	OpcodeLDLL:     implLDLL,
	OpcodeRLA:      implRLA,
	OpcodeRRA:      implRRA,
	OpcodeRLCA:     implRLCA,
	OpcodeRRCA:     implRRCA,
	OpcodeORA:      implORA,
	OpcodeORB:      implORB,
	OpcodeORC:      implORC,
	OpcodeORD:      implORD,
	OpcodeORE:      implORE,
	OpcodeORH:      implORH,
	OpcodeORL:      implORL,
	OpcodeORHL:     implORHL,
	OpcodeANDA:     implANDA,
	OpcodeANDB:     implANDB,
	OpcodeANDC:     implANDC,
	OpcodeANDD:     implANDD,
	OpcodeANDE:     implANDE,
	OpcodeANDH:     implANDH,
	OpcodeANDL:     implANDL,
	OpcodeANDHL:    implANDHL,
	OpcodeXORA:     implXORA,
	OpcodeXORB:     implXORB,
	OpcodeXORC:     implXORC,
	OpcodeXORD:     implXORD,
	OpcodeXORE:     implXORE,
	OpcodeXORH:     implXORH,
	OpcodeXORL:     implXORL,
	OpcodeXORHL:    implXORHL,
	OpcodeSUBA:     implSUBA,
	OpcodeSUBB:     implSUBB,
	OpcodeSUBC:     implSUBC,
	OpcodeSUBD:     implSUBD,
	OpcodeSUBE:     implSUBE,
	OpcodeSUBH:     implSUBH,
	OpcodeSUBL:     implSUBL,
	OpcodeSUBHL:    implSUBHL,
	OpcodeSBCA:     implSBCA,
	OpcodeSBCB:     implSBCB,
	OpcodeSBCC:     implSBCC,
	OpcodeSBCD:     implSBCD,
	OpcodeSBCE:     implSBCE,
	OpcodeSBCH:     implSBCH,
	OpcodeSBCL:     implSBCL,
	OpcodeSBCHL:    implSBCHL,
	OpcodeCPA:      implCPA,
	OpcodeCPB:      implCPB,
	OpcodeCPC:      implCPC,
	OpcodeCPD:      implCPD,
	OpcodeCPE:      implCPE,
	OpcodeCPH:      implCPH,
	OpcodeCPL:      implCPL,
	OpcodeCPHL:     implCPHL,
	OpcodeADDA:     implADDA,
	OpcodeADDB:     implADDB,
	OpcodeADDC:     implADDC,
	OpcodeADDD:     implADDD,
	OpcodeADDE:     implADDE,
	OpcodeADDH:     implADDH,
	OpcodeADDL:     implADDL,
	OpcodeADDHL:    implADDHL,
	OpcodeADDSPe:   implADDSPe,
	OpcodeADCA:     implADCA,
	OpcodeADCB:     implADCB,
	OpcodeADCC:     implADCC,
	OpcodeADCD:     implADCD,
	OpcodeADCE:     implADCE,
	OpcodeADCH:     implADCH,
	OpcodeADCL:     implADCL,
	OpcodeADCHL:    implADCHL,
	OpcodeDAA:      implDAA,
	OpcodeCPLaka2f: implCPLaka2f,
	OpcodeCCF:      implCCF,
	OpcodeSCF:      implSCF,
	OpcodeDECA:     implDECA,
	OpcodeDECB:     implDECB,
	OpcodeDECC:     implDECC,
	OpcodeDECD:     implDECD,
	OpcodeDECE:     implDECE,
	OpcodeDECH:     implDECH,
	OpcodeDECL:     implDECL,
	OpcodeINCA:     implINCA,
	OpcodeINCB:     implINCB,
	OpcodeINCC:     implINCC,
	OpcodeINCD:     implINCD,
	OpcodeINCE:     implINCE,
	OpcodeINCH:     implINCH,
	OpcodeINCL:     implINCL,
	OpcodeINCHLInd: implINCHLInd,
	OpcodeDECHLInd: implDECHLInd,
	OpcodeDI:       implDI,
	OpcodeEI:       implEI,
	OpcodeHALT:     implHALT,
	OpcodeJRe:      implJRe,
	OpcodeJPnn:     implJPnn,
	OpcodeJPHL:     implJPHL,
	OpcodeJRZe:     implJRZe,
	OpcodeJRCe:     implJRCe,
	OpcodeJRNZe:    implJRNZe,
	OpcodeJRNCe:    implJRNCe,
	OpcodeJPCnn:    implJPCnn,
	OpcodeJPNCnn:   implJPNCnn,
	OpcodeJPZnn:    implJPZnn,
	OpcodeJPNZnn:   implJPNZnn,
	OpcodeINCBC:    implINCBC,
	OpcodeINCDE:    implINCDE,
	OpcodeINCHL:    implINCHL,
	OpcodeINCSP:    implINCSP,
	OpcodeDECBC:    implDECBC,
	OpcodeDECDE:    implDECDE,
	OpcodeDECHL:    implDECHL,
	OpcodeDECSP:    implDECSP,
	OpcodeCALLnn:   implCALLnn,
	OpcodeCALLNZnn: implCALLNZnn,
	OpcodeCALLZnn:  implCALLZnn,
	OpcodeCALLNCnn: implCALLNCnn,
	OpcodeCALLCnn:  implCALLCnn,
	OpcodeRET:      implRET,
	OpcodeRETI:     implRETI,
	OpcodeRETZ:     implRETZ,
	OpcodeRETNZ:    implRETNZ,
	OpcodeRETC:     implRETC,
	OpcodeRETNC:    implRETNC,
	OpcodePUSHBC:   implPUSHBC,
	OpcodePUSHDE:   implPUSHDE,
	OpcodePUSHHL:   implPUSHHL,
	OpcodePUSHAF:   implPUSHAF,
	OpcodePOPBC:    implPOPBC,
	OpcodePOPDE:    implPOPDE,
	OpcodePOPHL:    implPOPHL,
	OpcodePOPAF:    implPOPAF,
	OpcodeADDHLHL:  implADDHLHL,
	OpcodeADDHLBC:  implADDHLBC,
	OpcodeADDHLDE:  implADDHLDE,
	OpcodeADDHLSP:  implADDHLSP,
	OpcodeLDBCnn:   implLDBCnn,
	OpcodeLDDEnn:   implLDDEnn,
	OpcodeLDHLnn:   implLDHLnn,
	OpcodeLDSPnn:   implLDSPnn,
	OpcodeLDHLn:    implLDHLn,
	OpcodeLDHLSPe:  implLDHLSPe,
	OpcodeLDSPHL:   implLDSPHL,
	OpcodeLDHLAInc: implLDHLAInc,
	OpcodeLDHLADec: implLDHLADec,
	OpcodeLDHLA:    implLDHLA,
	OpcodeLDHLB:    implLDHLB,
	OpcodeLDHLC:    implLDHLC,
	OpcodeLDHLD:    implLDHLD,
	OpcodeLDHLE:    implLDHLE,
	OpcodeLDHLH:    implLDHLH,
	OpcodeLDHLL:    implLDHLL,
	OpcodeLDBCA:    implLDBCA,
	OpcodeLDDEA:    implLDDEA,
	OpcodeLDHCA:    implLDHCA,
	OpcodeLDHAC:    implLDHAC,
	OpcodeLDnnSP:   implLDnnSP,
	OpcodeLDnnA:    implLDnnA,
	OpcodeLDAnn:    implLDAnn,
	OpcodeCPn:      implCPn,
	OpcodeSUBn:     implSUBn,
	OpcodeORn:      implORn,
	OpcodeANDn:     implANDn,
	OpcodeADDn:     implADDn,
	OpcodeADCn:     implADCn,
	OpcodeSBCn:     implSBCn,
	OpcodeXORn:     implXORn,
	OpcodeLDHnA:    implLDHnA,
	OpcodeLDHAn:    implLDHAn,
	OpcodeLDADE:    implLDADE,
	OpcodeLDABC:    implLDABC,
	OpcodeLDAn:     implLDAn,
	OpcodeLDBn:     implLDBn,
	OpcodeLDCn:     implLDCn,
	OpcodeLDDn:     implLDDn,
	OpcodeLDEn:     implLDEn,
	OpcodeLDHn:     implLDHn,
	OpcodeLDLn:     implLDLn,
	OpcodeCB:       implCB,
	OpcodeRST0x00:  implRST0x00,
	OpcodeRST0x08:  implRST0x08,
	OpcodeRST0x10:  implRST0x10,
	OpcodeRST0x18:  implRST0x18,
	OpcodeRST0x20:  implRST0x20,
	OpcodeRST0x28:  implRST0x28,
	OpcodeRST0x30:  implRST0x30,
	OpcodeRST0x38:  implRST0x38,
	OpcodeUndefD3:  implUndefined,
	OpcodeUndefDB:  implUndefined,
	OpcodeUndefDD:  implUndefined,
	OpcodeUndefE3:  implUndefined,
	OpcodeUndefE4:  implUndefined,
	OpcodeUndefEB:  implUndefined,
	OpcodeUndefEC:  implUndefined,
	OpcodeUndefED:  implUndefined,
	OpcodeUndefF4:  implUndefined,
	OpcodeUndefFC:  implUndefined,
	OpcodeUndefFD:  implUndefined,
}

// Switch statement:

func Handler(cpu *CPU) CycleHandler {
	switch cpu.Regs.IR {
	case OpcodeNop:
		return implNop(cpu)
	case OpcodeLDAHLInc:
		return implLDAHLInc(cpu)
	case OpcodeLDAHLDec:
		return implLDAHLDec(cpu)
	case OpcodeLDAHL:
		return implLDAHL(cpu)
	case OpcodeLDBHL:
		return implLDBHL(cpu)
	case OpcodeLDCHL:
		return implLDCHL(cpu)
	case OpcodeLDDHL:
		return implLDDHL(cpu)
	case OpcodeLDEHL:
		return implLDEHL(cpu)
	case OpcodeLDHHL:
		return implLDHHL(cpu)
	case OpcodeLDLHL:
		return implLDLHL(cpu)
	case OpcodeLDAA:
		return implLDAA(cpu)
	case OpcodeLDAB:
		return implLDAB(cpu)
	case OpcodeLDAC:
		return implLDAC(cpu)
	case OpcodeLDAD:
		return implLDAD(cpu)
	case OpcodeLDAE:
		return implLDAE(cpu)
	case OpcodeLDAH:
		return implLDAH(cpu)
	case OpcodeLDAL:
		return implLDAL(cpu)
	case OpcodeLDBA:
		return implLDBA(cpu)
	case OpcodeLDBB:
		return implLDBB(cpu)
	case OpcodeLDBC:
		return implLDBC(cpu)
	case OpcodeLDBD:
		return implLDBD(cpu)
	case OpcodeLDBE:
		return implLDBE(cpu)
	case OpcodeLDBH:
		return implLDBH(cpu)
	case OpcodeLDBL:
		return implLDBL(cpu)
	case OpcodeLDCA:
		return implLDCA(cpu)
	case OpcodeLDCB:
		return implLDCB(cpu)
	case OpcodeLDCC:
		return implLDCC(cpu)
	case OpcodeLDCD:
		return implLDCD(cpu)
	case OpcodeLDCE:
		return implLDCE(cpu)
	case OpcodeLDCH:
		return implLDCH(cpu)
	case OpcodeLDCL:
		return implLDCL(cpu)
	case OpcodeLDDA:
		return implLDDA(cpu)
	case OpcodeLDDB:
		return implLDDB(cpu)
	case OpcodeLDDC:
		return implLDDC(cpu)
	case OpcodeLDDD:
		return implLDDD(cpu)
	case OpcodeLDDE:
		return implLDDE(cpu)
	case OpcodeLDDH:
		return implLDDH(cpu)
	case OpcodeLDDL:
		return implLDDL(cpu)
	case OpcodeLDEA:
		return implLDEA(cpu)
	case OpcodeLDEB:
		return implLDEB(cpu)
	case OpcodeLDEC:
		return implLDEC(cpu)
	case OpcodeLDED:
		return implLDED(cpu)
	case OpcodeLDEE:
		return implLDEE(cpu)
	case OpcodeLDEH:
		return implLDEH(cpu)
	case OpcodeLDEL:
		return implLDEL(cpu)
	case OpcodeLDHA:
		return implLDHA(cpu)
	case OpcodeLDHB:
		return implLDHB(cpu)
	case OpcodeLDHC:
		return implLDHC(cpu)
	case OpcodeLDHD:
		return implLDHD(cpu)
	case OpcodeLDHE:
		return implLDHE(cpu)
	case OpcodeLDHH:
		return implLDHH(cpu)
	case OpcodeLDHL:
		return implLDHL(cpu)
	case OpcodeLDLA:
		return implLDLA(cpu)
	case OpcodeLDLB:
		return implLDLB(cpu)
	case OpcodeLDLC:
		return implLDLC(cpu)
	case OpcodeLDLD:
		return implLDLD(cpu)
	case OpcodeLDLE:
		return implLDLE(cpu)
	case OpcodeLDLH:
		return implLDLH(cpu)
	case OpcodeLDLL:
		return implLDLL(cpu)
	case OpcodeRLA:
		return implRLA(cpu)
	case OpcodeRRA:
		return implRRA(cpu)
	case OpcodeRLCA:
		return implRLCA(cpu)
	case OpcodeRRCA:
		return implRRCA(cpu)
	case OpcodeORA:
		return implORA(cpu)
	case OpcodeORB:
		return implORB(cpu)
	case OpcodeORC:
		return implORC(cpu)
	case OpcodeORD:
		return implORD(cpu)
	case OpcodeORE:
		return implORE(cpu)
	case OpcodeORH:
		return implORH(cpu)
	case OpcodeORL:
		return implORL(cpu)
	case OpcodeORHL:
		return implORHL(cpu)
	case OpcodeANDA:
		return implANDA(cpu)
	case OpcodeANDB:
		return implANDB(cpu)
	case OpcodeANDC:
		return implANDC(cpu)
	case OpcodeANDD:
		return implANDD(cpu)
	case OpcodeANDE:
		return implANDE(cpu)
	case OpcodeANDH:
		return implANDH(cpu)
	case OpcodeANDL:
		return implANDL(cpu)
	case OpcodeANDHL:
		return implANDHL(cpu)
	case OpcodeXORA:
		return implXORA(cpu)
	case OpcodeXORB:
		return implXORB(cpu)
	case OpcodeXORC:
		return implXORC(cpu)
	case OpcodeXORD:
		return implXORD(cpu)
	case OpcodeXORE:
		return implXORE(cpu)
	case OpcodeXORH:
		return implXORH(cpu)
	case OpcodeXORL:
		return implXORL(cpu)
	case OpcodeXORHL:
		return implXORHL(cpu)
	case OpcodeSUBA:
		return implSUBA(cpu)
	case OpcodeSUBB:
		return implSUBB(cpu)
	case OpcodeSUBC:
		return implSUBC(cpu)
	case OpcodeSUBD:
		return implSUBD(cpu)
	case OpcodeSUBE:
		return implSUBE(cpu)
	case OpcodeSUBH:
		return implSUBH(cpu)
	case OpcodeSUBL:
		return implSUBL(cpu)
	case OpcodeSUBHL:
		return implSUBHL(cpu)
	case OpcodeSBCA:
		return implSBCA(cpu)
	case OpcodeSBCB:
		return implSBCB(cpu)
	case OpcodeSBCC:
		return implSBCC(cpu)
	case OpcodeSBCD:
		return implSBCD(cpu)
	case OpcodeSBCE:
		return implSBCE(cpu)
	case OpcodeSBCH:
		return implSBCH(cpu)
	case OpcodeSBCL:
		return implSBCL(cpu)
	case OpcodeSBCHL:
		return implSBCHL(cpu)
	case OpcodeCPA:
		return implCPA(cpu)
	case OpcodeCPB:
		return implCPB(cpu)
	case OpcodeCPC:
		return implCPC(cpu)
	case OpcodeCPD:
		return implCPD(cpu)
	case OpcodeCPE:
		return implCPE(cpu)
	case OpcodeCPH:
		return implCPH(cpu)
	case OpcodeCPL:
		return implCPL(cpu)
	case OpcodeCPHL:
		return implCPHL(cpu)
	case OpcodeADDA:
		return implADDA(cpu)
	case OpcodeADDB:
		return implADDB(cpu)
	case OpcodeADDC:
		return implADDC(cpu)
	case OpcodeADDD:
		return implADDD(cpu)
	case OpcodeADDE:
		return implADDE(cpu)
	case OpcodeADDH:
		return implADDH(cpu)
	case OpcodeADDL:
		return implADDL(cpu)
	case OpcodeADDHL:
		return implADDHL(cpu)
	case OpcodeADDSPe:
		return implADDSPe(cpu)
	case OpcodeADCA:
		return implADCA(cpu)
	case OpcodeADCB:
		return implADCB(cpu)
	case OpcodeADCC:
		return implADCC(cpu)
	case OpcodeADCD:
		return implADCD(cpu)
	case OpcodeADCE:
		return implADCE(cpu)
	case OpcodeADCH:
		return implADCH(cpu)
	case OpcodeADCL:
		return implADCL(cpu)
	case OpcodeADCHL:
		return implADCHL(cpu)
	case OpcodeDAA:
		return implDAA(cpu)
	case OpcodeCPLaka2f:
		return implCPLaka2f(cpu)
	case OpcodeCCF:
		return implCCF(cpu)
	case OpcodeSCF:
		return implSCF(cpu)
	case OpcodeDECA:
		return implDECA(cpu)
	case OpcodeDECB:
		return implDECB(cpu)
	case OpcodeDECC:
		return implDECC(cpu)
	case OpcodeDECD:
		return implDECD(cpu)
	case OpcodeDECE:
		return implDECE(cpu)
	case OpcodeDECH:
		return implDECH(cpu)
	case OpcodeDECL:
		return implDECL(cpu)
	case OpcodeINCA:
		return implINCA(cpu)
	case OpcodeINCB:
		return implINCB(cpu)
	case OpcodeINCC:
		return implINCC(cpu)
	case OpcodeINCD:
		return implINCD(cpu)
	case OpcodeINCE:
		return implINCE(cpu)
	case OpcodeINCH:
		return implINCH(cpu)
	case OpcodeINCL:
		return implINCL(cpu)
	case OpcodeINCHLInd:
		return implINCHLInd(cpu)
	case OpcodeDECHLInd:
		return implDECHLInd(cpu)
	case OpcodeDI:
		return implDI(cpu)
	case OpcodeEI:
		return implEI(cpu)
	case OpcodeHALT:
		return implHALT(cpu)
	case OpcodeJRe:
		return implJRe(cpu)
	case OpcodeJPnn:
		return implJPnn(cpu)
	case OpcodeJPHL:
		return implJPHL(cpu)
	case OpcodeJRZe:
		return implJRZe(cpu)
	case OpcodeJRCe:
		return implJRCe(cpu)
	case OpcodeJRNZe:
		return implJRNZe(cpu)
	case OpcodeJRNCe:
		return implJRNCe(cpu)
	case OpcodeJPCnn:
		return implJPCnn(cpu)
	case OpcodeJPNCnn:
		return implJPNCnn(cpu)
	case OpcodeJPZnn:
		return implJPZnn(cpu)
	case OpcodeJPNZnn:
		return implJPNZnn(cpu)
	case OpcodeINCBC:
		return implINCBC(cpu)
	case OpcodeINCDE:
		return implINCDE(cpu)
	case OpcodeINCHL:
		return implINCHL(cpu)
	case OpcodeINCSP:
		return implINCSP(cpu)
	case OpcodeDECBC:
		return implDECBC(cpu)
	case OpcodeDECDE:
		return implDECDE(cpu)
	case OpcodeDECHL:
		return implDECHL(cpu)
	case OpcodeDECSP:
		return implDECSP(cpu)
	case OpcodeCALLnn:
		return implCALLnn(cpu)
	case OpcodeCALLNZnn:
		return implCALLNZnn(cpu)
	case OpcodeCALLZnn:
		return implCALLZnn(cpu)
	case OpcodeCALLNCnn:
		return implCALLNCnn(cpu)
	case OpcodeCALLCnn:
		return implCALLCnn(cpu)
	case OpcodeRET:
		return implRET(cpu)
	case OpcodeRETI:
		return implRETI(cpu)
	case OpcodeRETZ:
		return implRETZ(cpu)
	case OpcodeRETNZ:
		return implRETNZ(cpu)
	case OpcodeRETC:
		return implRETC(cpu)
	case OpcodeRETNC:
		return implRETNC(cpu)
	case OpcodePUSHBC:
		return implPUSHBC(cpu)
	case OpcodePUSHDE:
		return implPUSHDE(cpu)
	case OpcodePUSHHL:
		return implPUSHHL(cpu)
	case OpcodePUSHAF:
		return implPUSHAF(cpu)
	case OpcodePOPBC:
		return implPOPBC(cpu)
	case OpcodePOPDE:
		return implPOPDE(cpu)
	case OpcodePOPHL:
		return implPOPHL(cpu)
	case OpcodePOPAF:
		return implPOPAF(cpu)
	case OpcodeADDHLHL:
		return implADDHLHL(cpu)
	case OpcodeADDHLBC:
		return implADDHLBC(cpu)
	case OpcodeADDHLDE:
		return implADDHLDE(cpu)
	case OpcodeADDHLSP:
		return implADDHLSP(cpu)
	case OpcodeLDBCnn:
		return implLDBCnn(cpu)
	case OpcodeLDDEnn:
		return implLDDEnn(cpu)
	case OpcodeLDHLnn:
		return implLDHLnn(cpu)
	case OpcodeLDSPnn:
		return implLDSPnn(cpu)
	case OpcodeLDHLn:
		return implLDHLn(cpu)
	case OpcodeLDHLSPe:
		return implLDHLSPe(cpu)
	case OpcodeLDSPHL:
		return implLDSPHL(cpu)
	case OpcodeLDHLAInc:
		return implLDHLAInc(cpu)
	case OpcodeLDHLADec:
		return implLDHLADec(cpu)
	case OpcodeLDHLA:
		return implLDHLA(cpu)
	case OpcodeLDHLB:
		return implLDHLB(cpu)
	case OpcodeLDHLC:
		return implLDHLC(cpu)
	case OpcodeLDHLD:
		return implLDHLD(cpu)
	case OpcodeLDHLE:
		return implLDHLE(cpu)
	case OpcodeLDHLH:
		return implLDHLH(cpu)
	case OpcodeLDHLL:
		return implLDHLL(cpu)
	case OpcodeLDBCA:
		return implLDBCA(cpu)
	case OpcodeLDDEA:
		return implLDDEA(cpu)
	case OpcodeLDHCA:
		return implLDHCA(cpu)
	case OpcodeLDHAC:
		return implLDHAC(cpu)
	case OpcodeLDnnSP:
		return implLDnnSP(cpu)
	case OpcodeLDnnA:
		return implLDnnA(cpu)
	case OpcodeLDAnn:
		return implLDAnn(cpu)
	case OpcodeCPn:
		return implCPn(cpu)
	case OpcodeSUBn:
		return implSUBn(cpu)
	case OpcodeORn:
		return implORn(cpu)
	case OpcodeANDn:
		return implANDn(cpu)
	case OpcodeADDn:
		return implADDn(cpu)
	case OpcodeADCn:
		return implADCn(cpu)
	case OpcodeSBCn:
		return implSBCn(cpu)
	case OpcodeXORn:
		return implXORn(cpu)
	case OpcodeLDHnA:
		return implLDHnA(cpu)
	case OpcodeLDHAn:
		return implLDHAn(cpu)
	case OpcodeLDADE:
		return implLDADE(cpu)
	case OpcodeLDABC:
		return implLDABC(cpu)
	case OpcodeLDAn:
		return implLDAn(cpu)
	case OpcodeLDBn:
		return implLDBn(cpu)
	case OpcodeLDCn:
		return implLDCn(cpu)
	case OpcodeLDDn:
		return implLDDn(cpu)
	case OpcodeLDEn:
		return implLDEn(cpu)
	case OpcodeLDHn:
		return implLDHn(cpu)
	case OpcodeLDLn:
		return implLDLn(cpu)
	case OpcodeCB:
		return implCB(cpu)
	case OpcodeRST0x00:
		return implRST0x00(cpu)
	case OpcodeRST0x08:
		return implRST0x08(cpu)
	case OpcodeRST0x10:
		return implRST0x10(cpu)
	case OpcodeRST0x18:
		return implRST0x18(cpu)
	case OpcodeRST0x20:
		return implRST0x20(cpu)
	case OpcodeRST0x28:
		return implRST0x28(cpu)
	case OpcodeRST0x30:
		return implRST0x30(cpu)
	case OpcodeRST0x38:
		return implRST0x38(cpu)
	case OpcodeUndefD3:
		return implUndefD3(cpu)
	case OpcodeUndefDB:
		return implUndefDB(cpu)
	case OpcodeUndefDD:
		return implUndefDD(cpu)
	case OpcodeUndefE3:
		return implUndefE3(cpu)
	case OpcodeUndefE4:
		return implUndefE4(cpu)
	case OpcodeUndefEB:
		return implUndefEB(cpu)
	case OpcodeUndefEC:
		return implUndefEC(cpu)
	case OpcodeUndefED:
		return implUndefED(cpu)
	case OpcodeUndefF4:
		return implUndefF4(cpu)
	case OpcodeUndefFC:
		return implUndefFC(cpu)
	case OpcodeUndefFD:
		return implUndefFD(cpu)
	}
	panic("unreachable")
}
