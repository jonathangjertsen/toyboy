// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.0
// Revision: 4061a5d82779342c5863a515363feb943fa59455
// Build Date: 2025-07-22T03:42:20Z
// Built By: goreleaser

package model

import (
	"errors"
	"fmt"
)

const (
	CBTargetB          CBTarget = 0
	CBTargetC          CBTarget = 1
	CBTargetD          CBTarget = 2
	CBTargetE          CBTarget = 3
	CBTargetH          CBTarget = 4
	CBTargetL          CBTarget = 5
	CBTargetIndirectHL CBTarget = 6
	CBTargetA          CBTarget = 7
)

var ErrInvalidCBTarget = errors.New("not a valid CBTarget")

const _CBTargetName = "BCDEHLIndirectHLA"

// CBTargetValues returns a list of the values for CBTarget
func CBTargetValues() []CBTarget {
	return []CBTarget{
		CBTargetB,
		CBTargetC,
		CBTargetD,
		CBTargetE,
		CBTargetH,
		CBTargetL,
		CBTargetIndirectHL,
		CBTargetA,
	}
}

var _CBTargetMap = map[CBTarget]string{
	CBTargetB:          _CBTargetName[0:1],
	CBTargetC:          _CBTargetName[1:2],
	CBTargetD:          _CBTargetName[2:3],
	CBTargetE:          _CBTargetName[3:4],
	CBTargetH:          _CBTargetName[4:5],
	CBTargetL:          _CBTargetName[5:6],
	CBTargetIndirectHL: _CBTargetName[6:16],
	CBTargetA:          _CBTargetName[16:17],
}

// String implements the Stringer interface.
func (x CBTarget) String() string {
	if str, ok := _CBTargetMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CBTarget(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CBTarget) IsValid() bool {
	_, ok := _CBTargetMap[x]
	return ok
}

var _CBTargetValue = map[string]CBTarget{
	_CBTargetName[0:1]:   CBTargetB,
	_CBTargetName[1:2]:   CBTargetC,
	_CBTargetName[2:3]:   CBTargetD,
	_CBTargetName[3:4]:   CBTargetE,
	_CBTargetName[4:5]:   CBTargetH,
	_CBTargetName[5:6]:   CBTargetL,
	_CBTargetName[6:16]:  CBTargetIndirectHL,
	_CBTargetName[16:17]: CBTargetA,
}

// ParseCBTarget attempts to convert a string to a CBTarget.
func ParseCBTarget(name string) (CBTarget, error) {
	if x, ok := _CBTargetValue[name]; ok {
		return x, nil
	}
	return CBTarget(0), fmt.Errorf("%s is %w", name, ErrInvalidCBTarget)
}

// MarshalText implements the text marshaller method.
func (x CBTarget) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CBTarget) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCBTarget(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *CBTarget) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

// Set implements the Golang flag.Value interface func.
func (x *CBTarget) Set(val string) error {
	v, err := ParseCBTarget(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *CBTarget) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *CBTarget) Type() string {
	return "CBTarget"
}

const (
	OpcodeNop      Opcode = 0
	OpcodeLDBCnn   Opcode = 1
	OpcodeLDBCA    Opcode = 2
	OpcodeINCBC    Opcode = 3
	OpcodeINCB     Opcode = 4
	OpcodeDECB     Opcode = 5
	OpcodeLDBn     Opcode = 6
	OpcodeRLCA     Opcode = 7
	OpcodeLDnnSP   Opcode = 8
	OpcodeADDHLBC  Opcode = 9
	OpcodeLDABC    Opcode = 10
	OpcodeDECBC    Opcode = 11
	OpcodeINCC     Opcode = 12
	OpcodeDECC     Opcode = 13
	OpcodeLDCn     Opcode = 14
	OpcodeRRCA     Opcode = 15
	OpcodeSTOP     Opcode = 16
	OpcodeLDDEnn   Opcode = 17
	OpcodeLDDEA    Opcode = 18
	OpcodeINCDE    Opcode = 19
	OpcodeINCD     Opcode = 20
	OpcodeDECD     Opcode = 21
	OpcodeLDDn     Opcode = 22
	OpcodeRLA      Opcode = 23
	OpcodeJRe      Opcode = 24
	OpcodeADDHLDE  Opcode = 25
	OpcodeLDADE    Opcode = 26
	OpcodeDECDE    Opcode = 27
	OpcodeINCE     Opcode = 28
	OpcodeDECE     Opcode = 29
	OpcodeLDEn     Opcode = 30
	OpcodeRRA      Opcode = 31
	OpcodeJRNZe    Opcode = 32
	OpcodeLDHLnn   Opcode = 33
	OpcodeLDHLAInc Opcode = 34
	OpcodeINCHL    Opcode = 35
	OpcodeINCH     Opcode = 36
	OpcodeDECH     Opcode = 37
	OpcodeLDHn     Opcode = 38
	OpcodeDAA      Opcode = 39
	OpcodeJRZe     Opcode = 40
	OpcodeADDHLHL  Opcode = 41
	OpcodeLDAHLInc Opcode = 42
	OpcodeDECHL    Opcode = 43
	OpcodeINCL     Opcode = 44
	OpcodeDECL     Opcode = 45
	OpcodeLDLn     Opcode = 46
	// namespace collision with CP L
	OpcodeCPLaka2f Opcode = 47
	OpcodeJRNCe    Opcode = 48
	OpcodeLDSPnn   Opcode = 49
	OpcodeLDHLADec Opcode = 50
	OpcodeINCSP    Opcode = 51
	OpcodeINCHLInd Opcode = 52
	OpcodeDECHLInd Opcode = 53
	OpcodeLDHLn    Opcode = 54
	OpcodeSCF      Opcode = 55
	OpcodeJRCe     Opcode = 56
	OpcodeADDHLSP  Opcode = 57
	OpcodeLDAHLDec Opcode = 58
	OpcodeDECSP    Opcode = 59
	OpcodeINCA     Opcode = 60
	OpcodeDECA     Opcode = 61
	OpcodeLDAn     Opcode = 62
	OpcodeCCF      Opcode = 63
	OpcodeLDBB     Opcode = 64
	OpcodeLDBC     Opcode = 65
	OpcodeLDBD     Opcode = 66
	OpcodeLDBE     Opcode = 67
	OpcodeLDBH     Opcode = 68
	OpcodeLDBL     Opcode = 69
	OpcodeLDBHL    Opcode = 70
	OpcodeLDBA     Opcode = 71
	OpcodeLDCB     Opcode = 72
	OpcodeLDCC     Opcode = 73
	OpcodeLDCD     Opcode = 74
	OpcodeLDCE     Opcode = 75
	OpcodeLDCH     Opcode = 76
	OpcodeLDCL     Opcode = 77
	OpcodeLDCHL    Opcode = 78
	OpcodeLDCA     Opcode = 79
	OpcodeLDDB     Opcode = 80
	OpcodeLDDC     Opcode = 81
	OpcodeLDDD     Opcode = 82
	OpcodeLDDE     Opcode = 83
	OpcodeLDDH     Opcode = 84
	OpcodeLDDL     Opcode = 85
	OpcodeLDDHL    Opcode = 86
	OpcodeLDDA     Opcode = 87
	OpcodeLDEB     Opcode = 88
	OpcodeLDEC     Opcode = 89
	OpcodeLDED     Opcode = 90
	OpcodeLDEE     Opcode = 91
	OpcodeLDEH     Opcode = 92
	OpcodeLDEL     Opcode = 93
	OpcodeLDEHL    Opcode = 94
	OpcodeLDEA     Opcode = 95
	OpcodeLDHB     Opcode = 96
	OpcodeLDHC     Opcode = 97
	OpcodeLDHD     Opcode = 98
	OpcodeLDHE     Opcode = 99
	OpcodeLDHH     Opcode = 100
	OpcodeLDHL     Opcode = 101
	OpcodeLDHHL    Opcode = 102
	OpcodeLDHA     Opcode = 103
	OpcodeLDLB     Opcode = 104
	OpcodeLDLC     Opcode = 105
	OpcodeLDLD     Opcode = 106
	OpcodeLDLE     Opcode = 107
	OpcodeLDLH     Opcode = 108
	OpcodeLDLL     Opcode = 109
	OpcodeLDLHL    Opcode = 110
	OpcodeLDLA     Opcode = 111
	OpcodeLDHLB    Opcode = 112
	OpcodeLDHLC    Opcode = 113
	OpcodeLDHLD    Opcode = 114
	OpcodeLDHLE    Opcode = 115
	OpcodeLDHLH    Opcode = 116
	OpcodeLDHLL    Opcode = 117
	OpcodeHALT     Opcode = 118
	OpcodeLDHLA    Opcode = 119
	OpcodeLDAB     Opcode = 120
	OpcodeLDAC     Opcode = 121
	OpcodeLDAD     Opcode = 122
	OpcodeLDAE     Opcode = 123
	OpcodeLDAH     Opcode = 124
	OpcodeLDAL     Opcode = 125
	OpcodeLDAHL    Opcode = 126
	OpcodeLDAA     Opcode = 127
	OpcodeADDB     Opcode = 128
	OpcodeADDC     Opcode = 129
	OpcodeADDD     Opcode = 130
	OpcodeADDE     Opcode = 131
	OpcodeADDH     Opcode = 132
	OpcodeADDL     Opcode = 133
	OpcodeADDHL    Opcode = 134
	OpcodeADDA     Opcode = 135
	OpcodeADCB     Opcode = 136
	OpcodeADCC     Opcode = 137
	OpcodeADCD     Opcode = 138
	OpcodeADCE     Opcode = 139
	OpcodeADCH     Opcode = 140
	OpcodeADCL     Opcode = 141
	OpcodeADCHL    Opcode = 142
	OpcodeADCA     Opcode = 143
	OpcodeSUBB     Opcode = 144
	OpcodeSUBC     Opcode = 145
	OpcodeSUBD     Opcode = 146
	OpcodeSUBE     Opcode = 147
	OpcodeSUBH     Opcode = 148
	OpcodeSUBL     Opcode = 149
	OpcodeSUBHL    Opcode = 150
	OpcodeSUBA     Opcode = 151
	OpcodeSBCB     Opcode = 152
	OpcodeSBCC     Opcode = 153
	OpcodeSBCD     Opcode = 154
	OpcodeSBCE     Opcode = 155
	OpcodeSBCH     Opcode = 156
	OpcodeSBCL     Opcode = 157
	OpcodeSBCHL    Opcode = 158
	OpcodeSBCA     Opcode = 159
	OpcodeANDB     Opcode = 160
	OpcodeANDC     Opcode = 161
	OpcodeANDD     Opcode = 162
	OpcodeANDE     Opcode = 163
	OpcodeANDH     Opcode = 164
	OpcodeANDL     Opcode = 165
	OpcodeANDHL    Opcode = 166
	OpcodeANDA     Opcode = 167
	OpcodeXORB     Opcode = 168
	OpcodeXORC     Opcode = 169
	OpcodeXORD     Opcode = 170
	OpcodeXORE     Opcode = 171
	OpcodeXORH     Opcode = 172
	OpcodeXORL     Opcode = 173
	OpcodeXORHL    Opcode = 174
	OpcodeXORA     Opcode = 175
	OpcodeORB      Opcode = 176
	OpcodeORC      Opcode = 177
	OpcodeORD      Opcode = 178
	OpcodeORE      Opcode = 179
	OpcodeORH      Opcode = 180
	OpcodeORL      Opcode = 181
	OpcodeORHL     Opcode = 182
	OpcodeORA      Opcode = 183
	OpcodeCPB      Opcode = 184
	OpcodeCPC      Opcode = 185
	OpcodeCPD      Opcode = 186
	OpcodeCPE      Opcode = 187
	OpcodeCPH      Opcode = 188
	OpcodeCPL      Opcode = 189
	OpcodeCPHL     Opcode = 190
	OpcodeCPA      Opcode = 191
	OpcodeRETNZ    Opcode = 192
	OpcodePOPBC    Opcode = 193
	OpcodeJPNZnn   Opcode = 194
	OpcodeJPnn     Opcode = 195
	OpcodeCALLNZnn Opcode = 196
	OpcodePUSHBC   Opcode = 197
	OpcodeADDn     Opcode = 198
	OpcodeRETZ     Opcode = 200
	OpcodeRST0x00  Opcode = 199
	OpcodeRET      Opcode = 201
	OpcodeJPZnn    Opcode = 202
	OpcodeCB       Opcode = 203
	OpcodeCALLZnn  Opcode = 204
	OpcodeCALLnn   Opcode = 205
	OpcodeADCn     Opcode = 206
	OpcodeRST0x08  Opcode = 207
	OpcodeRETNC    Opcode = 208
	OpcodePOPDE    Opcode = 209
	OpcodeJPNCnn   Opcode = 210
	OpcodeUndefD3  Opcode = 211
	OpcodeCALLNCnn Opcode = 212
	OpcodePUSHDE   Opcode = 213
	OpcodeSUBn     Opcode = 214
	OpcodeRST0x10  Opcode = 215
	OpcodeRETC     Opcode = 216
	OpcodeRETI     Opcode = 217
	OpcodeJPCnn    Opcode = 218
	OpcodeUndefDB  Opcode = 219
	OpcodeCALLCnn  Opcode = 220
	OpcodeUndefDD  Opcode = 221
	OpcodeSBCn     Opcode = 222
	OpcodeRST0x18  Opcode = 223
	OpcodeLDHnA    Opcode = 224
	OpcodePOPHL    Opcode = 225
	OpcodeLDHCA    Opcode = 226
	OpcodeUndefE3  Opcode = 227
	OpcodeUndefE4  Opcode = 228
	OpcodePUSHHL   Opcode = 229
	OpcodeANDn     Opcode = 230
	OpcodeRST0x20  Opcode = 231
	OpcodeADDSPe   Opcode = 232
	OpcodeJPHL     Opcode = 233
	OpcodeLDnnA    Opcode = 234
	OpcodeUndefEB  Opcode = 235
	OpcodeUndefEC  Opcode = 236
	OpcodeUndefED  Opcode = 237
	OpcodeXORn     Opcode = 238
	OpcodeRST0x28  Opcode = 239
	OpcodeLDHAn    Opcode = 240
	OpcodePOPAF    Opcode = 241
	OpcodeLDHAC    Opcode = 242
	OpcodeDI       Opcode = 243
	OpcodeUndefF4  Opcode = 244
	OpcodePUSHAF   Opcode = 245
	OpcodeORn      Opcode = 246
	OpcodeRST0x30  Opcode = 247
	OpcodeLDHLSPe  Opcode = 248
	OpcodeLDSPHL   Opcode = 249
	OpcodeLDAnn    Opcode = 250
	OpcodeEI       Opcode = 251
	OpcodeUndefFC  Opcode = 252
	OpcodeUndefFD  Opcode = 253
	OpcodeCPn      Opcode = 254
	OpcodeRST0x38  Opcode = 255
)

var ErrInvalidOpcode = errors.New("not a valid Opcode")

const _OpcodeName = "NopLDBCnnLDBCAINCBCINCBDECBLDBnRLCALDnnSPADDHLBCLDABCDECBCINCCDECCLDCnRRCASTOPLDDEnnLDDEAINCDEINCDDECDLDDnRLAJReADDHLDELDADEDECDEINCEDECELDEnRRAJRNZeLDHLnnLDHLAIncINCHLINCHDECHLDHnDAAJRZeADDHLHLLDAHLIncDECHLINCLDECLLDLnCPLaka2fJRNCeLDSPnnLDHLADecINCSPINCHLIndDECHLIndLDHLnSCFJRCeADDHLSPLDAHLDecDECSPINCADECALDAnCCFLDBBLDBCLDBDLDBELDBHLDBLLDBHLLDBALDCBLDCCLDCDLDCELDCHLDCLLDCHLLDCALDDBLDDCLDDDLDDELDDHLDDLLDDHLLDDALDEBLDECLDEDLDEELDEHLDELLDEHLLDEALDHBLDHCLDHDLDHELDHHLDHLLDHHLLDHALDLBLDLCLDLDLDLELDLHLDLLLDLHLLDLALDHLBLDHLCLDHLDLDHLELDHLHLDHLLHALTLDHLALDABLDACLDADLDAELDAHLDALLDAHLLDAAADDBADDCADDDADDEADDHADDLADDHLADDAADCBADCCADCDADCEADCHADCLADCHLADCASUBBSUBCSUBDSUBESUBHSUBLSUBHLSUBASBCBSBCCSBCDSBCESBCHSBCLSBCHLSBCAANDBANDCANDDANDEANDHANDLANDHLANDAXORBXORCXORDXOREXORHXORLXORHLXORAORBORCORDOREORHORLORHLORACPBCPCCPDCPECPHCPLCPHLCPARETNZPOPBCJPNZnnJPnnCALLNZnnPUSHBCADDnRETZRST0x00RETJPZnnCBCALLZnnCALLnnADCnRST0x08RETNCPOPDEJPNCnnUndefD3CALLNCnnPUSHDESUBnRST0x10RETCRETIJPCnnUndefDBCALLCnnUndefDDSBCnRST0x18LDHnAPOPHLLDHCAUndefE3UndefE4PUSHHLANDnRST0x20ADDSPeJPHLLDnnAUndefEBUndefECUndefEDXORnRST0x28LDHAnPOPAFLDHACDIUndefF4PUSHAFORnRST0x30LDHLSPeLDSPHLLDAnnEIUndefFCUndefFDCPnRST0x38"

// OpcodeValues returns a list of the values for Opcode
func OpcodeValues() []Opcode {
	return []Opcode{
		OpcodeNop,
		OpcodeLDBCnn,
		OpcodeLDBCA,
		OpcodeINCBC,
		OpcodeINCB,
		OpcodeDECB,
		OpcodeLDBn,
		OpcodeRLCA,
		OpcodeLDnnSP,
		OpcodeADDHLBC,
		OpcodeLDABC,
		OpcodeDECBC,
		OpcodeINCC,
		OpcodeDECC,
		OpcodeLDCn,
		OpcodeRRCA,
		OpcodeSTOP,
		OpcodeLDDEnn,
		OpcodeLDDEA,
		OpcodeINCDE,
		OpcodeINCD,
		OpcodeDECD,
		OpcodeLDDn,
		OpcodeRLA,
		OpcodeJRe,
		OpcodeADDHLDE,
		OpcodeLDADE,
		OpcodeDECDE,
		OpcodeINCE,
		OpcodeDECE,
		OpcodeLDEn,
		OpcodeRRA,
		OpcodeJRNZe,
		OpcodeLDHLnn,
		OpcodeLDHLAInc,
		OpcodeINCHL,
		OpcodeINCH,
		OpcodeDECH,
		OpcodeLDHn,
		OpcodeDAA,
		OpcodeJRZe,
		OpcodeADDHLHL,
		OpcodeLDAHLInc,
		OpcodeDECHL,
		OpcodeINCL,
		OpcodeDECL,
		OpcodeLDLn,
		OpcodeCPLaka2f,
		OpcodeJRNCe,
		OpcodeLDSPnn,
		OpcodeLDHLADec,
		OpcodeINCSP,
		OpcodeINCHLInd,
		OpcodeDECHLInd,
		OpcodeLDHLn,
		OpcodeSCF,
		OpcodeJRCe,
		OpcodeADDHLSP,
		OpcodeLDAHLDec,
		OpcodeDECSP,
		OpcodeINCA,
		OpcodeDECA,
		OpcodeLDAn,
		OpcodeCCF,
		OpcodeLDBB,
		OpcodeLDBC,
		OpcodeLDBD,
		OpcodeLDBE,
		OpcodeLDBH,
		OpcodeLDBL,
		OpcodeLDBHL,
		OpcodeLDBA,
		OpcodeLDCB,
		OpcodeLDCC,
		OpcodeLDCD,
		OpcodeLDCE,
		OpcodeLDCH,
		OpcodeLDCL,
		OpcodeLDCHL,
		OpcodeLDCA,
		OpcodeLDDB,
		OpcodeLDDC,
		OpcodeLDDD,
		OpcodeLDDE,
		OpcodeLDDH,
		OpcodeLDDL,
		OpcodeLDDHL,
		OpcodeLDDA,
		OpcodeLDEB,
		OpcodeLDEC,
		OpcodeLDED,
		OpcodeLDEE,
		OpcodeLDEH,
		OpcodeLDEL,
		OpcodeLDEHL,
		OpcodeLDEA,
		OpcodeLDHB,
		OpcodeLDHC,
		OpcodeLDHD,
		OpcodeLDHE,
		OpcodeLDHH,
		OpcodeLDHL,
		OpcodeLDHHL,
		OpcodeLDHA,
		OpcodeLDLB,
		OpcodeLDLC,
		OpcodeLDLD,
		OpcodeLDLE,
		OpcodeLDLH,
		OpcodeLDLL,
		OpcodeLDLHL,
		OpcodeLDLA,
		OpcodeLDHLB,
		OpcodeLDHLC,
		OpcodeLDHLD,
		OpcodeLDHLE,
		OpcodeLDHLH,
		OpcodeLDHLL,
		OpcodeHALT,
		OpcodeLDHLA,
		OpcodeLDAB,
		OpcodeLDAC,
		OpcodeLDAD,
		OpcodeLDAE,
		OpcodeLDAH,
		OpcodeLDAL,
		OpcodeLDAHL,
		OpcodeLDAA,
		OpcodeADDB,
		OpcodeADDC,
		OpcodeADDD,
		OpcodeADDE,
		OpcodeADDH,
		OpcodeADDL,
		OpcodeADDHL,
		OpcodeADDA,
		OpcodeADCB,
		OpcodeADCC,
		OpcodeADCD,
		OpcodeADCE,
		OpcodeADCH,
		OpcodeADCL,
		OpcodeADCHL,
		OpcodeADCA,
		OpcodeSUBB,
		OpcodeSUBC,
		OpcodeSUBD,
		OpcodeSUBE,
		OpcodeSUBH,
		OpcodeSUBL,
		OpcodeSUBHL,
		OpcodeSUBA,
		OpcodeSBCB,
		OpcodeSBCC,
		OpcodeSBCD,
		OpcodeSBCE,
		OpcodeSBCH,
		OpcodeSBCL,
		OpcodeSBCHL,
		OpcodeSBCA,
		OpcodeANDB,
		OpcodeANDC,
		OpcodeANDD,
		OpcodeANDE,
		OpcodeANDH,
		OpcodeANDL,
		OpcodeANDHL,
		OpcodeANDA,
		OpcodeXORB,
		OpcodeXORC,
		OpcodeXORD,
		OpcodeXORE,
		OpcodeXORH,
		OpcodeXORL,
		OpcodeXORHL,
		OpcodeXORA,
		OpcodeORB,
		OpcodeORC,
		OpcodeORD,
		OpcodeORE,
		OpcodeORH,
		OpcodeORL,
		OpcodeORHL,
		OpcodeORA,
		OpcodeCPB,
		OpcodeCPC,
		OpcodeCPD,
		OpcodeCPE,
		OpcodeCPH,
		OpcodeCPL,
		OpcodeCPHL,
		OpcodeCPA,
		OpcodeRETNZ,
		OpcodePOPBC,
		OpcodeJPNZnn,
		OpcodeJPnn,
		OpcodeCALLNZnn,
		OpcodePUSHBC,
		OpcodeADDn,
		OpcodeRETZ,
		OpcodeRST0x00,
		OpcodeRET,
		OpcodeJPZnn,
		OpcodeCB,
		OpcodeCALLZnn,
		OpcodeCALLnn,
		OpcodeADCn,
		OpcodeRST0x08,
		OpcodeRETNC,
		OpcodePOPDE,
		OpcodeJPNCnn,
		OpcodeUndefD3,
		OpcodeCALLNCnn,
		OpcodePUSHDE,
		OpcodeSUBn,
		OpcodeRST0x10,
		OpcodeRETC,
		OpcodeRETI,
		OpcodeJPCnn,
		OpcodeUndefDB,
		OpcodeCALLCnn,
		OpcodeUndefDD,
		OpcodeSBCn,
		OpcodeRST0x18,
		OpcodeLDHnA,
		OpcodePOPHL,
		OpcodeLDHCA,
		OpcodeUndefE3,
		OpcodeUndefE4,
		OpcodePUSHHL,
		OpcodeANDn,
		OpcodeRST0x20,
		OpcodeADDSPe,
		OpcodeJPHL,
		OpcodeLDnnA,
		OpcodeUndefEB,
		OpcodeUndefEC,
		OpcodeUndefED,
		OpcodeXORn,
		OpcodeRST0x28,
		OpcodeLDHAn,
		OpcodePOPAF,
		OpcodeLDHAC,
		OpcodeDI,
		OpcodeUndefF4,
		OpcodePUSHAF,
		OpcodeORn,
		OpcodeRST0x30,
		OpcodeLDHLSPe,
		OpcodeLDSPHL,
		OpcodeLDAnn,
		OpcodeEI,
		OpcodeUndefFC,
		OpcodeUndefFD,
		OpcodeCPn,
		OpcodeRST0x38,
	}
}

var _OpcodeMap = map[Opcode]string{
	OpcodeNop:      _OpcodeName[0:3],
	OpcodeLDBCnn:   _OpcodeName[3:9],
	OpcodeLDBCA:    _OpcodeName[9:14],
	OpcodeINCBC:    _OpcodeName[14:19],
	OpcodeINCB:     _OpcodeName[19:23],
	OpcodeDECB:     _OpcodeName[23:27],
	OpcodeLDBn:     _OpcodeName[27:31],
	OpcodeRLCA:     _OpcodeName[31:35],
	OpcodeLDnnSP:   _OpcodeName[35:41],
	OpcodeADDHLBC:  _OpcodeName[41:48],
	OpcodeLDABC:    _OpcodeName[48:53],
	OpcodeDECBC:    _OpcodeName[53:58],
	OpcodeINCC:     _OpcodeName[58:62],
	OpcodeDECC:     _OpcodeName[62:66],
	OpcodeLDCn:     _OpcodeName[66:70],
	OpcodeRRCA:     _OpcodeName[70:74],
	OpcodeSTOP:     _OpcodeName[74:78],
	OpcodeLDDEnn:   _OpcodeName[78:84],
	OpcodeLDDEA:    _OpcodeName[84:89],
	OpcodeINCDE:    _OpcodeName[89:94],
	OpcodeINCD:     _OpcodeName[94:98],
	OpcodeDECD:     _OpcodeName[98:102],
	OpcodeLDDn:     _OpcodeName[102:106],
	OpcodeRLA:      _OpcodeName[106:109],
	OpcodeJRe:      _OpcodeName[109:112],
	OpcodeADDHLDE:  _OpcodeName[112:119],
	OpcodeLDADE:    _OpcodeName[119:124],
	OpcodeDECDE:    _OpcodeName[124:129],
	OpcodeINCE:     _OpcodeName[129:133],
	OpcodeDECE:     _OpcodeName[133:137],
	OpcodeLDEn:     _OpcodeName[137:141],
	OpcodeRRA:      _OpcodeName[141:144],
	OpcodeJRNZe:    _OpcodeName[144:149],
	OpcodeLDHLnn:   _OpcodeName[149:155],
	OpcodeLDHLAInc: _OpcodeName[155:163],
	OpcodeINCHL:    _OpcodeName[163:168],
	OpcodeINCH:     _OpcodeName[168:172],
	OpcodeDECH:     _OpcodeName[172:176],
	OpcodeLDHn:     _OpcodeName[176:180],
	OpcodeDAA:      _OpcodeName[180:183],
	OpcodeJRZe:     _OpcodeName[183:187],
	OpcodeADDHLHL:  _OpcodeName[187:194],
	OpcodeLDAHLInc: _OpcodeName[194:202],
	OpcodeDECHL:    _OpcodeName[202:207],
	OpcodeINCL:     _OpcodeName[207:211],
	OpcodeDECL:     _OpcodeName[211:215],
	OpcodeLDLn:     _OpcodeName[215:219],
	OpcodeCPLaka2f: _OpcodeName[219:227],
	OpcodeJRNCe:    _OpcodeName[227:232],
	OpcodeLDSPnn:   _OpcodeName[232:238],
	OpcodeLDHLADec: _OpcodeName[238:246],
	OpcodeINCSP:    _OpcodeName[246:251],
	OpcodeINCHLInd: _OpcodeName[251:259],
	OpcodeDECHLInd: _OpcodeName[259:267],
	OpcodeLDHLn:    _OpcodeName[267:272],
	OpcodeSCF:      _OpcodeName[272:275],
	OpcodeJRCe:     _OpcodeName[275:279],
	OpcodeADDHLSP:  _OpcodeName[279:286],
	OpcodeLDAHLDec: _OpcodeName[286:294],
	OpcodeDECSP:    _OpcodeName[294:299],
	OpcodeINCA:     _OpcodeName[299:303],
	OpcodeDECA:     _OpcodeName[303:307],
	OpcodeLDAn:     _OpcodeName[307:311],
	OpcodeCCF:      _OpcodeName[311:314],
	OpcodeLDBB:     _OpcodeName[314:318],
	OpcodeLDBC:     _OpcodeName[318:322],
	OpcodeLDBD:     _OpcodeName[322:326],
	OpcodeLDBE:     _OpcodeName[326:330],
	OpcodeLDBH:     _OpcodeName[330:334],
	OpcodeLDBL:     _OpcodeName[334:338],
	OpcodeLDBHL:    _OpcodeName[338:343],
	OpcodeLDBA:     _OpcodeName[343:347],
	OpcodeLDCB:     _OpcodeName[347:351],
	OpcodeLDCC:     _OpcodeName[351:355],
	OpcodeLDCD:     _OpcodeName[355:359],
	OpcodeLDCE:     _OpcodeName[359:363],
	OpcodeLDCH:     _OpcodeName[363:367],
	OpcodeLDCL:     _OpcodeName[367:371],
	OpcodeLDCHL:    _OpcodeName[371:376],
	OpcodeLDCA:     _OpcodeName[376:380],
	OpcodeLDDB:     _OpcodeName[380:384],
	OpcodeLDDC:     _OpcodeName[384:388],
	OpcodeLDDD:     _OpcodeName[388:392],
	OpcodeLDDE:     _OpcodeName[392:396],
	OpcodeLDDH:     _OpcodeName[396:400],
	OpcodeLDDL:     _OpcodeName[400:404],
	OpcodeLDDHL:    _OpcodeName[404:409],
	OpcodeLDDA:     _OpcodeName[409:413],
	OpcodeLDEB:     _OpcodeName[413:417],
	OpcodeLDEC:     _OpcodeName[417:421],
	OpcodeLDED:     _OpcodeName[421:425],
	OpcodeLDEE:     _OpcodeName[425:429],
	OpcodeLDEH:     _OpcodeName[429:433],
	OpcodeLDEL:     _OpcodeName[433:437],
	OpcodeLDEHL:    _OpcodeName[437:442],
	OpcodeLDEA:     _OpcodeName[442:446],
	OpcodeLDHB:     _OpcodeName[446:450],
	OpcodeLDHC:     _OpcodeName[450:454],
	OpcodeLDHD:     _OpcodeName[454:458],
	OpcodeLDHE:     _OpcodeName[458:462],
	OpcodeLDHH:     _OpcodeName[462:466],
	OpcodeLDHL:     _OpcodeName[466:470],
	OpcodeLDHHL:    _OpcodeName[470:475],
	OpcodeLDHA:     _OpcodeName[475:479],
	OpcodeLDLB:     _OpcodeName[479:483],
	OpcodeLDLC:     _OpcodeName[483:487],
	OpcodeLDLD:     _OpcodeName[487:491],
	OpcodeLDLE:     _OpcodeName[491:495],
	OpcodeLDLH:     _OpcodeName[495:499],
	OpcodeLDLL:     _OpcodeName[499:503],
	OpcodeLDLHL:    _OpcodeName[503:508],
	OpcodeLDLA:     _OpcodeName[508:512],
	OpcodeLDHLB:    _OpcodeName[512:517],
	OpcodeLDHLC:    _OpcodeName[517:522],
	OpcodeLDHLD:    _OpcodeName[522:527],
	OpcodeLDHLE:    _OpcodeName[527:532],
	OpcodeLDHLH:    _OpcodeName[532:537],
	OpcodeLDHLL:    _OpcodeName[537:542],
	OpcodeHALT:     _OpcodeName[542:546],
	OpcodeLDHLA:    _OpcodeName[546:551],
	OpcodeLDAB:     _OpcodeName[551:555],
	OpcodeLDAC:     _OpcodeName[555:559],
	OpcodeLDAD:     _OpcodeName[559:563],
	OpcodeLDAE:     _OpcodeName[563:567],
	OpcodeLDAH:     _OpcodeName[567:571],
	OpcodeLDAL:     _OpcodeName[571:575],
	OpcodeLDAHL:    _OpcodeName[575:580],
	OpcodeLDAA:     _OpcodeName[580:584],
	OpcodeADDB:     _OpcodeName[584:588],
	OpcodeADDC:     _OpcodeName[588:592],
	OpcodeADDD:     _OpcodeName[592:596],
	OpcodeADDE:     _OpcodeName[596:600],
	OpcodeADDH:     _OpcodeName[600:604],
	OpcodeADDL:     _OpcodeName[604:608],
	OpcodeADDHL:    _OpcodeName[608:613],
	OpcodeADDA:     _OpcodeName[613:617],
	OpcodeADCB:     _OpcodeName[617:621],
	OpcodeADCC:     _OpcodeName[621:625],
	OpcodeADCD:     _OpcodeName[625:629],
	OpcodeADCE:     _OpcodeName[629:633],
	OpcodeADCH:     _OpcodeName[633:637],
	OpcodeADCL:     _OpcodeName[637:641],
	OpcodeADCHL:    _OpcodeName[641:646],
	OpcodeADCA:     _OpcodeName[646:650],
	OpcodeSUBB:     _OpcodeName[650:654],
	OpcodeSUBC:     _OpcodeName[654:658],
	OpcodeSUBD:     _OpcodeName[658:662],
	OpcodeSUBE:     _OpcodeName[662:666],
	OpcodeSUBH:     _OpcodeName[666:670],
	OpcodeSUBL:     _OpcodeName[670:674],
	OpcodeSUBHL:    _OpcodeName[674:679],
	OpcodeSUBA:     _OpcodeName[679:683],
	OpcodeSBCB:     _OpcodeName[683:687],
	OpcodeSBCC:     _OpcodeName[687:691],
	OpcodeSBCD:     _OpcodeName[691:695],
	OpcodeSBCE:     _OpcodeName[695:699],
	OpcodeSBCH:     _OpcodeName[699:703],
	OpcodeSBCL:     _OpcodeName[703:707],
	OpcodeSBCHL:    _OpcodeName[707:712],
	OpcodeSBCA:     _OpcodeName[712:716],
	OpcodeANDB:     _OpcodeName[716:720],
	OpcodeANDC:     _OpcodeName[720:724],
	OpcodeANDD:     _OpcodeName[724:728],
	OpcodeANDE:     _OpcodeName[728:732],
	OpcodeANDH:     _OpcodeName[732:736],
	OpcodeANDL:     _OpcodeName[736:740],
	OpcodeANDHL:    _OpcodeName[740:745],
	OpcodeANDA:     _OpcodeName[745:749],
	OpcodeXORB:     _OpcodeName[749:753],
	OpcodeXORC:     _OpcodeName[753:757],
	OpcodeXORD:     _OpcodeName[757:761],
	OpcodeXORE:     _OpcodeName[761:765],
	OpcodeXORH:     _OpcodeName[765:769],
	OpcodeXORL:     _OpcodeName[769:773],
	OpcodeXORHL:    _OpcodeName[773:778],
	OpcodeXORA:     _OpcodeName[778:782],
	OpcodeORB:      _OpcodeName[782:785],
	OpcodeORC:      _OpcodeName[785:788],
	OpcodeORD:      _OpcodeName[788:791],
	OpcodeORE:      _OpcodeName[791:794],
	OpcodeORH:      _OpcodeName[794:797],
	OpcodeORL:      _OpcodeName[797:800],
	OpcodeORHL:     _OpcodeName[800:804],
	OpcodeORA:      _OpcodeName[804:807],
	OpcodeCPB:      _OpcodeName[807:810],
	OpcodeCPC:      _OpcodeName[810:813],
	OpcodeCPD:      _OpcodeName[813:816],
	OpcodeCPE:      _OpcodeName[816:819],
	OpcodeCPH:      _OpcodeName[819:822],
	OpcodeCPL:      _OpcodeName[822:825],
	OpcodeCPHL:     _OpcodeName[825:829],
	OpcodeCPA:      _OpcodeName[829:832],
	OpcodeRETNZ:    _OpcodeName[832:837],
	OpcodePOPBC:    _OpcodeName[837:842],
	OpcodeJPNZnn:   _OpcodeName[842:848],
	OpcodeJPnn:     _OpcodeName[848:852],
	OpcodeCALLNZnn: _OpcodeName[852:860],
	OpcodePUSHBC:   _OpcodeName[860:866],
	OpcodeADDn:     _OpcodeName[866:870],
	OpcodeRETZ:     _OpcodeName[870:874],
	OpcodeRST0x00:  _OpcodeName[874:881],
	OpcodeRET:      _OpcodeName[881:884],
	OpcodeJPZnn:    _OpcodeName[884:889],
	OpcodeCB:       _OpcodeName[889:891],
	OpcodeCALLZnn:  _OpcodeName[891:898],
	OpcodeCALLnn:   _OpcodeName[898:904],
	OpcodeADCn:     _OpcodeName[904:908],
	OpcodeRST0x08:  _OpcodeName[908:915],
	OpcodeRETNC:    _OpcodeName[915:920],
	OpcodePOPDE:    _OpcodeName[920:925],
	OpcodeJPNCnn:   _OpcodeName[925:931],
	OpcodeUndefD3:  _OpcodeName[931:938],
	OpcodeCALLNCnn: _OpcodeName[938:946],
	OpcodePUSHDE:   _OpcodeName[946:952],
	OpcodeSUBn:     _OpcodeName[952:956],
	OpcodeRST0x10:  _OpcodeName[956:963],
	OpcodeRETC:     _OpcodeName[963:967],
	OpcodeRETI:     _OpcodeName[967:971],
	OpcodeJPCnn:    _OpcodeName[971:976],
	OpcodeUndefDB:  _OpcodeName[976:983],
	OpcodeCALLCnn:  _OpcodeName[983:990],
	OpcodeUndefDD:  _OpcodeName[990:997],
	OpcodeSBCn:     _OpcodeName[997:1001],
	OpcodeRST0x18:  _OpcodeName[1001:1008],
	OpcodeLDHnA:    _OpcodeName[1008:1013],
	OpcodePOPHL:    _OpcodeName[1013:1018],
	OpcodeLDHCA:    _OpcodeName[1018:1023],
	OpcodeUndefE3:  _OpcodeName[1023:1030],
	OpcodeUndefE4:  _OpcodeName[1030:1037],
	OpcodePUSHHL:   _OpcodeName[1037:1043],
	OpcodeANDn:     _OpcodeName[1043:1047],
	OpcodeRST0x20:  _OpcodeName[1047:1054],
	OpcodeADDSPe:   _OpcodeName[1054:1060],
	OpcodeJPHL:     _OpcodeName[1060:1064],
	OpcodeLDnnA:    _OpcodeName[1064:1069],
	OpcodeUndefEB:  _OpcodeName[1069:1076],
	OpcodeUndefEC:  _OpcodeName[1076:1083],
	OpcodeUndefED:  _OpcodeName[1083:1090],
	OpcodeXORn:     _OpcodeName[1090:1094],
	OpcodeRST0x28:  _OpcodeName[1094:1101],
	OpcodeLDHAn:    _OpcodeName[1101:1106],
	OpcodePOPAF:    _OpcodeName[1106:1111],
	OpcodeLDHAC:    _OpcodeName[1111:1116],
	OpcodeDI:       _OpcodeName[1116:1118],
	OpcodeUndefF4:  _OpcodeName[1118:1125],
	OpcodePUSHAF:   _OpcodeName[1125:1131],
	OpcodeORn:      _OpcodeName[1131:1134],
	OpcodeRST0x30:  _OpcodeName[1134:1141],
	OpcodeLDHLSPe:  _OpcodeName[1141:1148],
	OpcodeLDSPHL:   _OpcodeName[1148:1154],
	OpcodeLDAnn:    _OpcodeName[1154:1159],
	OpcodeEI:       _OpcodeName[1159:1161],
	OpcodeUndefFC:  _OpcodeName[1161:1168],
	OpcodeUndefFD:  _OpcodeName[1168:1175],
	OpcodeCPn:      _OpcodeName[1175:1178],
	OpcodeRST0x38:  _OpcodeName[1178:1185],
}

// String implements the Stringer interface.
func (x Opcode) String() string {
	if str, ok := _OpcodeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Opcode(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Opcode) IsValid() bool {
	_, ok := _OpcodeMap[x]
	return ok
}

var _OpcodeValue = map[string]Opcode{
	_OpcodeName[0:3]:       OpcodeNop,
	_OpcodeName[3:9]:       OpcodeLDBCnn,
	_OpcodeName[9:14]:      OpcodeLDBCA,
	_OpcodeName[14:19]:     OpcodeINCBC,
	_OpcodeName[19:23]:     OpcodeINCB,
	_OpcodeName[23:27]:     OpcodeDECB,
	_OpcodeName[27:31]:     OpcodeLDBn,
	_OpcodeName[31:35]:     OpcodeRLCA,
	_OpcodeName[35:41]:     OpcodeLDnnSP,
	_OpcodeName[41:48]:     OpcodeADDHLBC,
	_OpcodeName[48:53]:     OpcodeLDABC,
	_OpcodeName[53:58]:     OpcodeDECBC,
	_OpcodeName[58:62]:     OpcodeINCC,
	_OpcodeName[62:66]:     OpcodeDECC,
	_OpcodeName[66:70]:     OpcodeLDCn,
	_OpcodeName[70:74]:     OpcodeRRCA,
	_OpcodeName[74:78]:     OpcodeSTOP,
	_OpcodeName[78:84]:     OpcodeLDDEnn,
	_OpcodeName[84:89]:     OpcodeLDDEA,
	_OpcodeName[89:94]:     OpcodeINCDE,
	_OpcodeName[94:98]:     OpcodeINCD,
	_OpcodeName[98:102]:    OpcodeDECD,
	_OpcodeName[102:106]:   OpcodeLDDn,
	_OpcodeName[106:109]:   OpcodeRLA,
	_OpcodeName[109:112]:   OpcodeJRe,
	_OpcodeName[112:119]:   OpcodeADDHLDE,
	_OpcodeName[119:124]:   OpcodeLDADE,
	_OpcodeName[124:129]:   OpcodeDECDE,
	_OpcodeName[129:133]:   OpcodeINCE,
	_OpcodeName[133:137]:   OpcodeDECE,
	_OpcodeName[137:141]:   OpcodeLDEn,
	_OpcodeName[141:144]:   OpcodeRRA,
	_OpcodeName[144:149]:   OpcodeJRNZe,
	_OpcodeName[149:155]:   OpcodeLDHLnn,
	_OpcodeName[155:163]:   OpcodeLDHLAInc,
	_OpcodeName[163:168]:   OpcodeINCHL,
	_OpcodeName[168:172]:   OpcodeINCH,
	_OpcodeName[172:176]:   OpcodeDECH,
	_OpcodeName[176:180]:   OpcodeLDHn,
	_OpcodeName[180:183]:   OpcodeDAA,
	_OpcodeName[183:187]:   OpcodeJRZe,
	_OpcodeName[187:194]:   OpcodeADDHLHL,
	_OpcodeName[194:202]:   OpcodeLDAHLInc,
	_OpcodeName[202:207]:   OpcodeDECHL,
	_OpcodeName[207:211]:   OpcodeINCL,
	_OpcodeName[211:215]:   OpcodeDECL,
	_OpcodeName[215:219]:   OpcodeLDLn,
	_OpcodeName[219:227]:   OpcodeCPLaka2f,
	_OpcodeName[227:232]:   OpcodeJRNCe,
	_OpcodeName[232:238]:   OpcodeLDSPnn,
	_OpcodeName[238:246]:   OpcodeLDHLADec,
	_OpcodeName[246:251]:   OpcodeINCSP,
	_OpcodeName[251:259]:   OpcodeINCHLInd,
	_OpcodeName[259:267]:   OpcodeDECHLInd,
	_OpcodeName[267:272]:   OpcodeLDHLn,
	_OpcodeName[272:275]:   OpcodeSCF,
	_OpcodeName[275:279]:   OpcodeJRCe,
	_OpcodeName[279:286]:   OpcodeADDHLSP,
	_OpcodeName[286:294]:   OpcodeLDAHLDec,
	_OpcodeName[294:299]:   OpcodeDECSP,
	_OpcodeName[299:303]:   OpcodeINCA,
	_OpcodeName[303:307]:   OpcodeDECA,
	_OpcodeName[307:311]:   OpcodeLDAn,
	_OpcodeName[311:314]:   OpcodeCCF,
	_OpcodeName[314:318]:   OpcodeLDBB,
	_OpcodeName[318:322]:   OpcodeLDBC,
	_OpcodeName[322:326]:   OpcodeLDBD,
	_OpcodeName[326:330]:   OpcodeLDBE,
	_OpcodeName[330:334]:   OpcodeLDBH,
	_OpcodeName[334:338]:   OpcodeLDBL,
	_OpcodeName[338:343]:   OpcodeLDBHL,
	_OpcodeName[343:347]:   OpcodeLDBA,
	_OpcodeName[347:351]:   OpcodeLDCB,
	_OpcodeName[351:355]:   OpcodeLDCC,
	_OpcodeName[355:359]:   OpcodeLDCD,
	_OpcodeName[359:363]:   OpcodeLDCE,
	_OpcodeName[363:367]:   OpcodeLDCH,
	_OpcodeName[367:371]:   OpcodeLDCL,
	_OpcodeName[371:376]:   OpcodeLDCHL,
	_OpcodeName[376:380]:   OpcodeLDCA,
	_OpcodeName[380:384]:   OpcodeLDDB,
	_OpcodeName[384:388]:   OpcodeLDDC,
	_OpcodeName[388:392]:   OpcodeLDDD,
	_OpcodeName[392:396]:   OpcodeLDDE,
	_OpcodeName[396:400]:   OpcodeLDDH,
	_OpcodeName[400:404]:   OpcodeLDDL,
	_OpcodeName[404:409]:   OpcodeLDDHL,
	_OpcodeName[409:413]:   OpcodeLDDA,
	_OpcodeName[413:417]:   OpcodeLDEB,
	_OpcodeName[417:421]:   OpcodeLDEC,
	_OpcodeName[421:425]:   OpcodeLDED,
	_OpcodeName[425:429]:   OpcodeLDEE,
	_OpcodeName[429:433]:   OpcodeLDEH,
	_OpcodeName[433:437]:   OpcodeLDEL,
	_OpcodeName[437:442]:   OpcodeLDEHL,
	_OpcodeName[442:446]:   OpcodeLDEA,
	_OpcodeName[446:450]:   OpcodeLDHB,
	_OpcodeName[450:454]:   OpcodeLDHC,
	_OpcodeName[454:458]:   OpcodeLDHD,
	_OpcodeName[458:462]:   OpcodeLDHE,
	_OpcodeName[462:466]:   OpcodeLDHH,
	_OpcodeName[466:470]:   OpcodeLDHL,
	_OpcodeName[470:475]:   OpcodeLDHHL,
	_OpcodeName[475:479]:   OpcodeLDHA,
	_OpcodeName[479:483]:   OpcodeLDLB,
	_OpcodeName[483:487]:   OpcodeLDLC,
	_OpcodeName[487:491]:   OpcodeLDLD,
	_OpcodeName[491:495]:   OpcodeLDLE,
	_OpcodeName[495:499]:   OpcodeLDLH,
	_OpcodeName[499:503]:   OpcodeLDLL,
	_OpcodeName[503:508]:   OpcodeLDLHL,
	_OpcodeName[508:512]:   OpcodeLDLA,
	_OpcodeName[512:517]:   OpcodeLDHLB,
	_OpcodeName[517:522]:   OpcodeLDHLC,
	_OpcodeName[522:527]:   OpcodeLDHLD,
	_OpcodeName[527:532]:   OpcodeLDHLE,
	_OpcodeName[532:537]:   OpcodeLDHLH,
	_OpcodeName[537:542]:   OpcodeLDHLL,
	_OpcodeName[542:546]:   OpcodeHALT,
	_OpcodeName[546:551]:   OpcodeLDHLA,
	_OpcodeName[551:555]:   OpcodeLDAB,
	_OpcodeName[555:559]:   OpcodeLDAC,
	_OpcodeName[559:563]:   OpcodeLDAD,
	_OpcodeName[563:567]:   OpcodeLDAE,
	_OpcodeName[567:571]:   OpcodeLDAH,
	_OpcodeName[571:575]:   OpcodeLDAL,
	_OpcodeName[575:580]:   OpcodeLDAHL,
	_OpcodeName[580:584]:   OpcodeLDAA,
	_OpcodeName[584:588]:   OpcodeADDB,
	_OpcodeName[588:592]:   OpcodeADDC,
	_OpcodeName[592:596]:   OpcodeADDD,
	_OpcodeName[596:600]:   OpcodeADDE,
	_OpcodeName[600:604]:   OpcodeADDH,
	_OpcodeName[604:608]:   OpcodeADDL,
	_OpcodeName[608:613]:   OpcodeADDHL,
	_OpcodeName[613:617]:   OpcodeADDA,
	_OpcodeName[617:621]:   OpcodeADCB,
	_OpcodeName[621:625]:   OpcodeADCC,
	_OpcodeName[625:629]:   OpcodeADCD,
	_OpcodeName[629:633]:   OpcodeADCE,
	_OpcodeName[633:637]:   OpcodeADCH,
	_OpcodeName[637:641]:   OpcodeADCL,
	_OpcodeName[641:646]:   OpcodeADCHL,
	_OpcodeName[646:650]:   OpcodeADCA,
	_OpcodeName[650:654]:   OpcodeSUBB,
	_OpcodeName[654:658]:   OpcodeSUBC,
	_OpcodeName[658:662]:   OpcodeSUBD,
	_OpcodeName[662:666]:   OpcodeSUBE,
	_OpcodeName[666:670]:   OpcodeSUBH,
	_OpcodeName[670:674]:   OpcodeSUBL,
	_OpcodeName[674:679]:   OpcodeSUBHL,
	_OpcodeName[679:683]:   OpcodeSUBA,
	_OpcodeName[683:687]:   OpcodeSBCB,
	_OpcodeName[687:691]:   OpcodeSBCC,
	_OpcodeName[691:695]:   OpcodeSBCD,
	_OpcodeName[695:699]:   OpcodeSBCE,
	_OpcodeName[699:703]:   OpcodeSBCH,
	_OpcodeName[703:707]:   OpcodeSBCL,
	_OpcodeName[707:712]:   OpcodeSBCHL,
	_OpcodeName[712:716]:   OpcodeSBCA,
	_OpcodeName[716:720]:   OpcodeANDB,
	_OpcodeName[720:724]:   OpcodeANDC,
	_OpcodeName[724:728]:   OpcodeANDD,
	_OpcodeName[728:732]:   OpcodeANDE,
	_OpcodeName[732:736]:   OpcodeANDH,
	_OpcodeName[736:740]:   OpcodeANDL,
	_OpcodeName[740:745]:   OpcodeANDHL,
	_OpcodeName[745:749]:   OpcodeANDA,
	_OpcodeName[749:753]:   OpcodeXORB,
	_OpcodeName[753:757]:   OpcodeXORC,
	_OpcodeName[757:761]:   OpcodeXORD,
	_OpcodeName[761:765]:   OpcodeXORE,
	_OpcodeName[765:769]:   OpcodeXORH,
	_OpcodeName[769:773]:   OpcodeXORL,
	_OpcodeName[773:778]:   OpcodeXORHL,
	_OpcodeName[778:782]:   OpcodeXORA,
	_OpcodeName[782:785]:   OpcodeORB,
	_OpcodeName[785:788]:   OpcodeORC,
	_OpcodeName[788:791]:   OpcodeORD,
	_OpcodeName[791:794]:   OpcodeORE,
	_OpcodeName[794:797]:   OpcodeORH,
	_OpcodeName[797:800]:   OpcodeORL,
	_OpcodeName[800:804]:   OpcodeORHL,
	_OpcodeName[804:807]:   OpcodeORA,
	_OpcodeName[807:810]:   OpcodeCPB,
	_OpcodeName[810:813]:   OpcodeCPC,
	_OpcodeName[813:816]:   OpcodeCPD,
	_OpcodeName[816:819]:   OpcodeCPE,
	_OpcodeName[819:822]:   OpcodeCPH,
	_OpcodeName[822:825]:   OpcodeCPL,
	_OpcodeName[825:829]:   OpcodeCPHL,
	_OpcodeName[829:832]:   OpcodeCPA,
	_OpcodeName[832:837]:   OpcodeRETNZ,
	_OpcodeName[837:842]:   OpcodePOPBC,
	_OpcodeName[842:848]:   OpcodeJPNZnn,
	_OpcodeName[848:852]:   OpcodeJPnn,
	_OpcodeName[852:860]:   OpcodeCALLNZnn,
	_OpcodeName[860:866]:   OpcodePUSHBC,
	_OpcodeName[866:870]:   OpcodeADDn,
	_OpcodeName[870:874]:   OpcodeRETZ,
	_OpcodeName[874:881]:   OpcodeRST0x00,
	_OpcodeName[881:884]:   OpcodeRET,
	_OpcodeName[884:889]:   OpcodeJPZnn,
	_OpcodeName[889:891]:   OpcodeCB,
	_OpcodeName[891:898]:   OpcodeCALLZnn,
	_OpcodeName[898:904]:   OpcodeCALLnn,
	_OpcodeName[904:908]:   OpcodeADCn,
	_OpcodeName[908:915]:   OpcodeRST0x08,
	_OpcodeName[915:920]:   OpcodeRETNC,
	_OpcodeName[920:925]:   OpcodePOPDE,
	_OpcodeName[925:931]:   OpcodeJPNCnn,
	_OpcodeName[931:938]:   OpcodeUndefD3,
	_OpcodeName[938:946]:   OpcodeCALLNCnn,
	_OpcodeName[946:952]:   OpcodePUSHDE,
	_OpcodeName[952:956]:   OpcodeSUBn,
	_OpcodeName[956:963]:   OpcodeRST0x10,
	_OpcodeName[963:967]:   OpcodeRETC,
	_OpcodeName[967:971]:   OpcodeRETI,
	_OpcodeName[971:976]:   OpcodeJPCnn,
	_OpcodeName[976:983]:   OpcodeUndefDB,
	_OpcodeName[983:990]:   OpcodeCALLCnn,
	_OpcodeName[990:997]:   OpcodeUndefDD,
	_OpcodeName[997:1001]:  OpcodeSBCn,
	_OpcodeName[1001:1008]: OpcodeRST0x18,
	_OpcodeName[1008:1013]: OpcodeLDHnA,
	_OpcodeName[1013:1018]: OpcodePOPHL,
	_OpcodeName[1018:1023]: OpcodeLDHCA,
	_OpcodeName[1023:1030]: OpcodeUndefE3,
	_OpcodeName[1030:1037]: OpcodeUndefE4,
	_OpcodeName[1037:1043]: OpcodePUSHHL,
	_OpcodeName[1043:1047]: OpcodeANDn,
	_OpcodeName[1047:1054]: OpcodeRST0x20,
	_OpcodeName[1054:1060]: OpcodeADDSPe,
	_OpcodeName[1060:1064]: OpcodeJPHL,
	_OpcodeName[1064:1069]: OpcodeLDnnA,
	_OpcodeName[1069:1076]: OpcodeUndefEB,
	_OpcodeName[1076:1083]: OpcodeUndefEC,
	_OpcodeName[1083:1090]: OpcodeUndefED,
	_OpcodeName[1090:1094]: OpcodeXORn,
	_OpcodeName[1094:1101]: OpcodeRST0x28,
	_OpcodeName[1101:1106]: OpcodeLDHAn,
	_OpcodeName[1106:1111]: OpcodePOPAF,
	_OpcodeName[1111:1116]: OpcodeLDHAC,
	_OpcodeName[1116:1118]: OpcodeDI,
	_OpcodeName[1118:1125]: OpcodeUndefF4,
	_OpcodeName[1125:1131]: OpcodePUSHAF,
	_OpcodeName[1131:1134]: OpcodeORn,
	_OpcodeName[1134:1141]: OpcodeRST0x30,
	_OpcodeName[1141:1148]: OpcodeLDHLSPe,
	_OpcodeName[1148:1154]: OpcodeLDSPHL,
	_OpcodeName[1154:1159]: OpcodeLDAnn,
	_OpcodeName[1159:1161]: OpcodeEI,
	_OpcodeName[1161:1168]: OpcodeUndefFC,
	_OpcodeName[1168:1175]: OpcodeUndefFD,
	_OpcodeName[1175:1178]: OpcodeCPn,
	_OpcodeName[1178:1185]: OpcodeRST0x38,
}

// ParseOpcode attempts to convert a string to a Opcode.
func ParseOpcode(name string) (Opcode, error) {
	if x, ok := _OpcodeValue[name]; ok {
		return x, nil
	}
	return Opcode(0), fmt.Errorf("%s is %w", name, ErrInvalidOpcode)
}

// MarshalText implements the text marshaller method.
func (x Opcode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Opcode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseOpcode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *Opcode) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

// Set implements the Golang flag.Value interface func.
func (x *Opcode) Set(val string) error {
	v, err := ParseOpcode(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Opcode) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Opcode) Type() string {
	return "Opcode"
}

const (
	CbRLC  cb = 0
	CbRRC  cb = 1
	CbRL   cb = 2
	CbRR   cb = 3
	CbSLA  cb = 4
	CbSRA  cb = 5
	CbSWAP cb = 6
	CbSRL  cb = 7
	CbBit0 cb = 8
	CbBit1 cb = 9
	CbBit2 cb = 10
	CbBit3 cb = 11
	CbBit4 cb = 12
	CbBit5 cb = 13
	CbBit6 cb = 14
	CbBit7 cb = 15
	CbRes0 cb = 16
	CbRes1 cb = 17
	CbRes2 cb = 18
	CbRes3 cb = 19
	CbRes4 cb = 20
	CbRes5 cb = 21
	CbRes6 cb = 22
	CbRes7 cb = 23
	CbSet0 cb = 24
	CbSet1 cb = 25
	CbSet2 cb = 26
	CbSet3 cb = 27
	CbSet4 cb = 28
	CbSet5 cb = 29
	CbSet6 cb = 30
	CbSet7 cb = 31
)

var ErrInvalidcb = errors.New("not a valid cb")

const _cbName = "RLCRRCRLRRSLASRASWAPSRLBit0Bit1Bit2Bit3Bit4Bit5Bit6Bit7Res0Res1Res2Res3Res4Res5Res6Res7Set0Set1Set2Set3Set4Set5Set6Set7"

// cbValues returns a list of the values for cb
func cbValues() []cb {
	return []cb{
		CbRLC,
		CbRRC,
		CbRL,
		CbRR,
		CbSLA,
		CbSRA,
		CbSWAP,
		CbSRL,
		CbBit0,
		CbBit1,
		CbBit2,
		CbBit3,
		CbBit4,
		CbBit5,
		CbBit6,
		CbBit7,
		CbRes0,
		CbRes1,
		CbRes2,
		CbRes3,
		CbRes4,
		CbRes5,
		CbRes6,
		CbRes7,
		CbSet0,
		CbSet1,
		CbSet2,
		CbSet3,
		CbSet4,
		CbSet5,
		CbSet6,
		CbSet7,
	}
}

var _cbMap = map[cb]string{
	CbRLC:  _cbName[0:3],
	CbRRC:  _cbName[3:6],
	CbRL:   _cbName[6:8],
	CbRR:   _cbName[8:10],
	CbSLA:  _cbName[10:13],
	CbSRA:  _cbName[13:16],
	CbSWAP: _cbName[16:20],
	CbSRL:  _cbName[20:23],
	CbBit0: _cbName[23:27],
	CbBit1: _cbName[27:31],
	CbBit2: _cbName[31:35],
	CbBit3: _cbName[35:39],
	CbBit4: _cbName[39:43],
	CbBit5: _cbName[43:47],
	CbBit6: _cbName[47:51],
	CbBit7: _cbName[51:55],
	CbRes0: _cbName[55:59],
	CbRes1: _cbName[59:63],
	CbRes2: _cbName[63:67],
	CbRes3: _cbName[67:71],
	CbRes4: _cbName[71:75],
	CbRes5: _cbName[75:79],
	CbRes6: _cbName[79:83],
	CbRes7: _cbName[83:87],
	CbSet0: _cbName[87:91],
	CbSet1: _cbName[91:95],
	CbSet2: _cbName[95:99],
	CbSet3: _cbName[99:103],
	CbSet4: _cbName[103:107],
	CbSet5: _cbName[107:111],
	CbSet6: _cbName[111:115],
	CbSet7: _cbName[115:119],
}

// String implements the Stringer interface.
func (x cb) String() string {
	if str, ok := _cbMap[x]; ok {
		return str
	}
	return fmt.Sprintf("cb(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x cb) IsValid() bool {
	_, ok := _cbMap[x]
	return ok
}

var _cbValue = map[string]cb{
	_cbName[0:3]:     CbRLC,
	_cbName[3:6]:     CbRRC,
	_cbName[6:8]:     CbRL,
	_cbName[8:10]:    CbRR,
	_cbName[10:13]:   CbSLA,
	_cbName[13:16]:   CbSRA,
	_cbName[16:20]:   CbSWAP,
	_cbName[20:23]:   CbSRL,
	_cbName[23:27]:   CbBit0,
	_cbName[27:31]:   CbBit1,
	_cbName[31:35]:   CbBit2,
	_cbName[35:39]:   CbBit3,
	_cbName[39:43]:   CbBit4,
	_cbName[43:47]:   CbBit5,
	_cbName[47:51]:   CbBit6,
	_cbName[51:55]:   CbBit7,
	_cbName[55:59]:   CbRes0,
	_cbName[59:63]:   CbRes1,
	_cbName[63:67]:   CbRes2,
	_cbName[67:71]:   CbRes3,
	_cbName[71:75]:   CbRes4,
	_cbName[75:79]:   CbRes5,
	_cbName[79:83]:   CbRes6,
	_cbName[83:87]:   CbRes7,
	_cbName[87:91]:   CbSet0,
	_cbName[91:95]:   CbSet1,
	_cbName[95:99]:   CbSet2,
	_cbName[99:103]:  CbSet3,
	_cbName[103:107]: CbSet4,
	_cbName[107:111]: CbSet5,
	_cbName[111:115]: CbSet6,
	_cbName[115:119]: CbSet7,
}

// Parsecb attempts to convert a string to a cb.
func Parsecb(name string) (cb, error) {
	if x, ok := _cbValue[name]; ok {
		return x, nil
	}
	return cb(0), fmt.Errorf("%s is %w", name, ErrInvalidcb)
}

// MarshalText implements the text marshaller method.
func (x cb) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *cb) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := Parsecb(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *cb) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

// Set implements the Golang flag.Value interface func.
func (x *cb) Set(val string) error {
	v, err := Parsecb(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *cb) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *cb) Type() string {
	return "cb"
}
