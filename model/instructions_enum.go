// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	CBTargetB CBTarget = iota
	CBTargetC
	CBTargetD
	CBTargetE
	CBTargetH
	CBTargetL
	CBTargetIndirectHL
	CBTargetA
)

var ErrInvalidCBTarget = errors.New("not a valid CBTarget")

const _CBTargetName = "BCDEHLIndirectHLA"

// CBTargetValues returns a list of the values for CBTarget
func CBTargetValues() []CBTarget {
	return []CBTarget{
		CBTargetB,
		CBTargetC,
		CBTargetD,
		CBTargetE,
		CBTargetH,
		CBTargetL,
		CBTargetIndirectHL,
		CBTargetA,
	}
}

var _CBTargetMap = map[CBTarget]string{
	CBTargetB:          _CBTargetName[0:1],
	CBTargetC:          _CBTargetName[1:2],
	CBTargetD:          _CBTargetName[2:3],
	CBTargetE:          _CBTargetName[3:4],
	CBTargetH:          _CBTargetName[4:5],
	CBTargetL:          _CBTargetName[5:6],
	CBTargetIndirectHL: _CBTargetName[6:16],
	CBTargetA:          _CBTargetName[16:17],
}

// String implements the Stringer interface.
func (x CBTarget) String() string {
	if str, ok := _CBTargetMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CBTarget(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CBTarget) IsValid() bool {
	_, ok := _CBTargetMap[x]
	return ok
}

var _CBTargetValue = map[string]CBTarget{
	_CBTargetName[0:1]:   CBTargetB,
	_CBTargetName[1:2]:   CBTargetC,
	_CBTargetName[2:3]:   CBTargetD,
	_CBTargetName[3:4]:   CBTargetE,
	_CBTargetName[4:5]:   CBTargetH,
	_CBTargetName[5:6]:   CBTargetL,
	_CBTargetName[6:16]:  CBTargetIndirectHL,
	_CBTargetName[16:17]: CBTargetA,
}

// ParseCBTarget attempts to convert a string to a CBTarget.
func ParseCBTarget(name string) (CBTarget, error) {
	if x, ok := _CBTargetValue[name]; ok {
		return x, nil
	}
	return CBTarget(0), fmt.Errorf("%s is %w", name, ErrInvalidCBTarget)
}

// MarshalText implements the text marshaller method.
func (x CBTarget) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CBTarget) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCBTarget(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *CBTarget) Set(val string) error {
	v, err := ParseCBTarget(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *CBTarget) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *CBTarget) Type() string {
	return "CBTarget"
}

const (
	OpcodeNop Opcode = iota
	OpcodeLDBCnn
	OpcodeINCBC Opcode = iota + 1
	OpcodeINCB
	OpcodeDECB
	OpcodeLDBn
	OpcodeADDHLBC Opcode = iota + 3
	OpcodeLDABC
	OpcodeDECBC
	OpcodeINCC
	OpcodeDECC
	OpcodeLDCn
	OpcodeLDDEnn Opcode = iota + 5
	OpcodeINCDE  Opcode = iota + 6
	OpcodeINCD
	OpcodeDECD
	OpcodeLDDn
	OpcodeRLA
	OpcodeJRe
	OpcodeADDHLDE
	OpcodeLDADE
	OpcodeDECDE
	OpcodeINCE
	OpcodeDECE
	OpcodeLDEn
	OpcodeJRNZe Opcode = iota + 7
	OpcodeLDHLnn
	OpcodeLDHLAInc
	OpcodeINCHL
	OpcodeINCH
	OpcodeDECH
	OpcodeLDHn
	OpcodeJRZe Opcode = iota + 8
	OpcodeADDHLHL
	OpcodeDECHL Opcode = iota + 9
	OpcodeINCL
	OpcodeDECL
	OpcodeLDLn
	OpcodeJRNCe Opcode = iota + 10
	OpcodeLDSPnn
	OpcodeLDHLADec
	OpcodeINCSP
	OpcodeJRCe Opcode = iota + 14
	OpcodeADDHLSP
	OpcodeDECSP Opcode = iota + 15
	OpcodeINCA
	OpcodeDECA
	OpcodeLDAn
	OpcodeLDBB Opcode = iota + 16
	OpcodeLDBC
	OpcodeLDBD
	OpcodeLDBE
	OpcodeLDBH
	OpcodeLDBL
	OpcodeLDBHL
	OpcodeLDBA
	OpcodeLDCB
	OpcodeLDCC
	OpcodeLDCD
	OpcodeLDCE
	OpcodeLDCH
	OpcodeLDCL
	OpcodeLDCHL
	OpcodeLDCA
	OpcodeLDDB
	OpcodeLDDC
	OpcodeLDDD
	OpcodeLDDE
	OpcodeLDDH
	OpcodeLDDL
	OpcodeLDDHL
	OpcodeLDDA
	OpcodeLDEB
	OpcodeLDEC
	OpcodeLDED
	OpcodeLDEE
	OpcodeLDEH
	OpcodeLDEL
	OpcodeLDEHL
	OpcodeLDEA
	OpcodeLDHB
	OpcodeLDHC
	OpcodeLDHD
	OpcodeLDHE
	OpcodeLDHH
	OpcodeLDHL
	OpcodeLDHHL
	OpcodeLDHA
	OpcodeLDLB
	OpcodeLDLC
	OpcodeLDLD
	OpcodeLDLE
	OpcodeLDLH
	OpcodeLDLL
	OpcodeLDLHL
	OpcodeLDLA
	OpcodeLDHLB
	OpcodeLDHLC
	OpcodeLDHLD
	OpcodeLDHLE
	OpcodeLDHLH
	OpcodeLDHLL
	OpcodeHALT
	OpcodeLDHLA
	OpcodeLDAB
	OpcodeLDAC
	OpcodeLDAD
	OpcodeLDAE
	OpcodeLDAH
	OpcodeLDAL
	OpcodeLDAHL
	OpcodeLDAA
	OpcodeADDB
	OpcodeADDC
	OpcodeADDD
	OpcodeADDE
	OpcodeADDH
	OpcodeADDL
	OpcodeADDHL
	OpcodeADDA
	OpcodeADCB
	OpcodeADCC
	OpcodeADCD
	OpcodeADCE
	OpcodeADCH
	OpcodeADCL
	OpcodeADCHL
	OpcodeADCA
	OpcodeSUBB
	OpcodeSUBC
	OpcodeSUBD
	OpcodeSUBE
	OpcodeSUBH
	OpcodeSUBL
	OpcodeSUBHL
	OpcodeSUBA
	OpcodeSBCB
	OpcodeSBCC
	OpcodeSBCD
	OpcodeSBCE
	OpcodeSBCH
	OpcodeSBCL
	OpcodeSBCHL
	OpcodeSBCA
	OpcodeANDB
	OpcodeANDC
	OpcodeANDD
	OpcodeANDE
	OpcodeANDH
	OpcodeANDL
	OpcodeANDHL
	OpcodeANDA
	OpcodeXORB
	OpcodeXORC
	OpcodeXORD
	OpcodeXORE
	OpcodeXORH
	OpcodeXORL
	OpcodeXORHL
	OpcodeXORA
	OpcodeORB
	OpcodeORC
	OpcodeORD
	OpcodeORE
	OpcodeORH
	OpcodeORL
	OpcodeORHL
	OpcodeORA
	OpcodeCPB
	OpcodeCPC
	OpcodeCPD
	OpcodeCPE
	OpcodeCPH
	OpcodeCPL
	OpcodeCPHL
	OpcodeCPA
	OpcodeRETNZ
	OpcodePOPBC
	OpcodeJPNZnn
	OpcodeJPnn
	OpcodePUSHBC Opcode = iota + 17
	OpcodeADDn
	OpcodeRETZ Opcode = iota + 18
	OpcodeRET
	OpcodeJPZnn
	OpcodeCB
	OpcodeCALLnn Opcode = iota + 19
	OpcodeADCn
	OpcodeRETNC Opcode = iota + 20
	OpcodeRETC  Opcode = iota + 27
	OpcodeRETI
	OpcodeJPCnn
	OpcodeJPNCnn Opcode = iota + 18
	OpcodeSUBn   Opcode = iota + 21
	OpcodeSBCn   Opcode = iota + 28
	OpcodeLDHnA  Opcode = iota + 29
	OpcodeLDHCA  Opcode = iota + 30
	OpcodeANDn   Opcode = iota + 33
	OpcodeLDnnA  Opcode = iota + 36
	OpcodeXORn   Opcode = iota + 39
	OpcodeLDHAn  Opcode = iota + 40
	OpcodeLDAnn  Opcode = iota + 49
	OpcodeDI     Opcode = iota + 41
	OpcodeORn    Opcode = iota + 43
	OpcodeEI     Opcode = iota + 47
	OpcodeCPn    Opcode = iota + 49
)

var ErrInvalidOpcode = errors.New("not a valid Opcode")

const _OpcodeName = "NopLDBCnnINCBCINCBDECBLDBnADDHLBCLDABCDECBCINCCDECCLDCnLDDEnnINCDEINCDDECDLDDnRLAJReADDHLDELDADEDECDEINCEDECELDEnJRNZeLDHLnnLDHLAIncINCHLINCHDECHLDHnJRZeADDHLHLDECHLINCLDECLLDLnJRNCeLDSPnnLDHLADecINCSPJRCeADDHLSPDECSPINCADECALDAnLDBBLDBCLDBDLDBELDBHLDBLLDBHLLDBALDCBLDCCLDCDLDCELDCHLDCLLDCHLLDCALDDBLDDCLDDDLDDELDDHLDDLLDDHLLDDALDEBLDECLDEDLDEELDEHLDELLDEHLLDEALDHBLDHCLDHDLDHELDHHLDHLLDHHLLDHALDLBLDLCLDLDLDLELDLHLDLLLDLHLLDLALDHLBLDHLCLDHLDLDHLELDHLHLDHLLHALTLDHLALDABLDACLDADLDAELDAHLDALLDAHLLDAAADDBADDCADDDADDEADDHADDLADDHLADDAADCBADCCADCDADCEADCHADCLADCHLADCASUBBSUBCSUBDSUBESUBHSUBLSUBHLSUBASBCBSBCCSBCDSBCESBCHSBCLSBCHLSBCAANDBANDCANDDANDEANDHANDLANDHLANDAXORBXORCXORDXOREXORHXORLXORHLXORAORBORCORDOREORHORLORHLORACPBCPCCPDCPECPHCPLCPHLCPARETNZPOPBCJPNZnnJPnnPUSHBCADDnRETZRETJPZnnCBCALLnnADCnRETNCRETCRETIJPCnnJPNCnnSUBnSBCnLDHnALDHCAANDnLDnnAXORnLDHAnLDAnnDIORnEICPn"

// OpcodeValues returns a list of the values for Opcode
func OpcodeValues() []Opcode {
	return []Opcode{
		OpcodeNop,
		OpcodeLDBCnn,
		OpcodeINCBC,
		OpcodeINCB,
		OpcodeDECB,
		OpcodeLDBn,
		OpcodeADDHLBC,
		OpcodeLDABC,
		OpcodeDECBC,
		OpcodeINCC,
		OpcodeDECC,
		OpcodeLDCn,
		OpcodeLDDEnn,
		OpcodeINCDE,
		OpcodeINCD,
		OpcodeDECD,
		OpcodeLDDn,
		OpcodeRLA,
		OpcodeJRe,
		OpcodeADDHLDE,
		OpcodeLDADE,
		OpcodeDECDE,
		OpcodeINCE,
		OpcodeDECE,
		OpcodeLDEn,
		OpcodeJRNZe,
		OpcodeLDHLnn,
		OpcodeLDHLAInc,
		OpcodeINCHL,
		OpcodeINCH,
		OpcodeDECH,
		OpcodeLDHn,
		OpcodeJRZe,
		OpcodeADDHLHL,
		OpcodeDECHL,
		OpcodeINCL,
		OpcodeDECL,
		OpcodeLDLn,
		OpcodeJRNCe,
		OpcodeLDSPnn,
		OpcodeLDHLADec,
		OpcodeINCSP,
		OpcodeJRCe,
		OpcodeADDHLSP,
		OpcodeDECSP,
		OpcodeINCA,
		OpcodeDECA,
		OpcodeLDAn,
		OpcodeLDBB,
		OpcodeLDBC,
		OpcodeLDBD,
		OpcodeLDBE,
		OpcodeLDBH,
		OpcodeLDBL,
		OpcodeLDBHL,
		OpcodeLDBA,
		OpcodeLDCB,
		OpcodeLDCC,
		OpcodeLDCD,
		OpcodeLDCE,
		OpcodeLDCH,
		OpcodeLDCL,
		OpcodeLDCHL,
		OpcodeLDCA,
		OpcodeLDDB,
		OpcodeLDDC,
		OpcodeLDDD,
		OpcodeLDDE,
		OpcodeLDDH,
		OpcodeLDDL,
		OpcodeLDDHL,
		OpcodeLDDA,
		OpcodeLDEB,
		OpcodeLDEC,
		OpcodeLDED,
		OpcodeLDEE,
		OpcodeLDEH,
		OpcodeLDEL,
		OpcodeLDEHL,
		OpcodeLDEA,
		OpcodeLDHB,
		OpcodeLDHC,
		OpcodeLDHD,
		OpcodeLDHE,
		OpcodeLDHH,
		OpcodeLDHL,
		OpcodeLDHHL,
		OpcodeLDHA,
		OpcodeLDLB,
		OpcodeLDLC,
		OpcodeLDLD,
		OpcodeLDLE,
		OpcodeLDLH,
		OpcodeLDLL,
		OpcodeLDLHL,
		OpcodeLDLA,
		OpcodeLDHLB,
		OpcodeLDHLC,
		OpcodeLDHLD,
		OpcodeLDHLE,
		OpcodeLDHLH,
		OpcodeLDHLL,
		OpcodeHALT,
		OpcodeLDHLA,
		OpcodeLDAB,
		OpcodeLDAC,
		OpcodeLDAD,
		OpcodeLDAE,
		OpcodeLDAH,
		OpcodeLDAL,
		OpcodeLDAHL,
		OpcodeLDAA,
		OpcodeADDB,
		OpcodeADDC,
		OpcodeADDD,
		OpcodeADDE,
		OpcodeADDH,
		OpcodeADDL,
		OpcodeADDHL,
		OpcodeADDA,
		OpcodeADCB,
		OpcodeADCC,
		OpcodeADCD,
		OpcodeADCE,
		OpcodeADCH,
		OpcodeADCL,
		OpcodeADCHL,
		OpcodeADCA,
		OpcodeSUBB,
		OpcodeSUBC,
		OpcodeSUBD,
		OpcodeSUBE,
		OpcodeSUBH,
		OpcodeSUBL,
		OpcodeSUBHL,
		OpcodeSUBA,
		OpcodeSBCB,
		OpcodeSBCC,
		OpcodeSBCD,
		OpcodeSBCE,
		OpcodeSBCH,
		OpcodeSBCL,
		OpcodeSBCHL,
		OpcodeSBCA,
		OpcodeANDB,
		OpcodeANDC,
		OpcodeANDD,
		OpcodeANDE,
		OpcodeANDH,
		OpcodeANDL,
		OpcodeANDHL,
		OpcodeANDA,
		OpcodeXORB,
		OpcodeXORC,
		OpcodeXORD,
		OpcodeXORE,
		OpcodeXORH,
		OpcodeXORL,
		OpcodeXORHL,
		OpcodeXORA,
		OpcodeORB,
		OpcodeORC,
		OpcodeORD,
		OpcodeORE,
		OpcodeORH,
		OpcodeORL,
		OpcodeORHL,
		OpcodeORA,
		OpcodeCPB,
		OpcodeCPC,
		OpcodeCPD,
		OpcodeCPE,
		OpcodeCPH,
		OpcodeCPL,
		OpcodeCPHL,
		OpcodeCPA,
		OpcodeRETNZ,
		OpcodePOPBC,
		OpcodeJPNZnn,
		OpcodeJPnn,
		OpcodePUSHBC,
		OpcodeADDn,
		OpcodeRETZ,
		OpcodeRET,
		OpcodeJPZnn,
		OpcodeCB,
		OpcodeCALLnn,
		OpcodeADCn,
		OpcodeRETNC,
		OpcodeRETC,
		OpcodeRETI,
		OpcodeJPCnn,
		OpcodeJPNCnn,
		OpcodeSUBn,
		OpcodeSBCn,
		OpcodeLDHnA,
		OpcodeLDHCA,
		OpcodeANDn,
		OpcodeLDnnA,
		OpcodeXORn,
		OpcodeLDHAn,
		OpcodeLDAnn,
		OpcodeDI,
		OpcodeORn,
		OpcodeEI,
		OpcodeCPn,
	}
}

var _OpcodeMap = map[Opcode]string{
	OpcodeNop:      _OpcodeName[0:3],
	OpcodeLDBCnn:   _OpcodeName[3:9],
	OpcodeINCBC:    _OpcodeName[9:14],
	OpcodeINCB:     _OpcodeName[14:18],
	OpcodeDECB:     _OpcodeName[18:22],
	OpcodeLDBn:     _OpcodeName[22:26],
	OpcodeADDHLBC:  _OpcodeName[26:33],
	OpcodeLDABC:    _OpcodeName[33:38],
	OpcodeDECBC:    _OpcodeName[38:43],
	OpcodeINCC:     _OpcodeName[43:47],
	OpcodeDECC:     _OpcodeName[47:51],
	OpcodeLDCn:     _OpcodeName[51:55],
	OpcodeLDDEnn:   _OpcodeName[55:61],
	OpcodeINCDE:    _OpcodeName[61:66],
	OpcodeINCD:     _OpcodeName[66:70],
	OpcodeDECD:     _OpcodeName[70:74],
	OpcodeLDDn:     _OpcodeName[74:78],
	OpcodeRLA:      _OpcodeName[78:81],
	OpcodeJRe:      _OpcodeName[81:84],
	OpcodeADDHLDE:  _OpcodeName[84:91],
	OpcodeLDADE:    _OpcodeName[91:96],
	OpcodeDECDE:    _OpcodeName[96:101],
	OpcodeINCE:     _OpcodeName[101:105],
	OpcodeDECE:     _OpcodeName[105:109],
	OpcodeLDEn:     _OpcodeName[109:113],
	OpcodeJRNZe:    _OpcodeName[113:118],
	OpcodeLDHLnn:   _OpcodeName[118:124],
	OpcodeLDHLAInc: _OpcodeName[124:132],
	OpcodeINCHL:    _OpcodeName[132:137],
	OpcodeINCH:     _OpcodeName[137:141],
	OpcodeDECH:     _OpcodeName[141:145],
	OpcodeLDHn:     _OpcodeName[145:149],
	OpcodeJRZe:     _OpcodeName[149:153],
	OpcodeADDHLHL:  _OpcodeName[153:160],
	OpcodeDECHL:    _OpcodeName[160:165],
	OpcodeINCL:     _OpcodeName[165:169],
	OpcodeDECL:     _OpcodeName[169:173],
	OpcodeLDLn:     _OpcodeName[173:177],
	OpcodeJRNCe:    _OpcodeName[177:182],
	OpcodeLDSPnn:   _OpcodeName[182:188],
	OpcodeLDHLADec: _OpcodeName[188:196],
	OpcodeINCSP:    _OpcodeName[196:201],
	OpcodeJRCe:     _OpcodeName[201:205],
	OpcodeADDHLSP:  _OpcodeName[205:212],
	OpcodeDECSP:    _OpcodeName[212:217],
	OpcodeINCA:     _OpcodeName[217:221],
	OpcodeDECA:     _OpcodeName[221:225],
	OpcodeLDAn:     _OpcodeName[225:229],
	OpcodeLDBB:     _OpcodeName[229:233],
	OpcodeLDBC:     _OpcodeName[233:237],
	OpcodeLDBD:     _OpcodeName[237:241],
	OpcodeLDBE:     _OpcodeName[241:245],
	OpcodeLDBH:     _OpcodeName[245:249],
	OpcodeLDBL:     _OpcodeName[249:253],
	OpcodeLDBHL:    _OpcodeName[253:258],
	OpcodeLDBA:     _OpcodeName[258:262],
	OpcodeLDCB:     _OpcodeName[262:266],
	OpcodeLDCC:     _OpcodeName[266:270],
	OpcodeLDCD:     _OpcodeName[270:274],
	OpcodeLDCE:     _OpcodeName[274:278],
	OpcodeLDCH:     _OpcodeName[278:282],
	OpcodeLDCL:     _OpcodeName[282:286],
	OpcodeLDCHL:    _OpcodeName[286:291],
	OpcodeLDCA:     _OpcodeName[291:295],
	OpcodeLDDB:     _OpcodeName[295:299],
	OpcodeLDDC:     _OpcodeName[299:303],
	OpcodeLDDD:     _OpcodeName[303:307],
	OpcodeLDDE:     _OpcodeName[307:311],
	OpcodeLDDH:     _OpcodeName[311:315],
	OpcodeLDDL:     _OpcodeName[315:319],
	OpcodeLDDHL:    _OpcodeName[319:324],
	OpcodeLDDA:     _OpcodeName[324:328],
	OpcodeLDEB:     _OpcodeName[328:332],
	OpcodeLDEC:     _OpcodeName[332:336],
	OpcodeLDED:     _OpcodeName[336:340],
	OpcodeLDEE:     _OpcodeName[340:344],
	OpcodeLDEH:     _OpcodeName[344:348],
	OpcodeLDEL:     _OpcodeName[348:352],
	OpcodeLDEHL:    _OpcodeName[352:357],
	OpcodeLDEA:     _OpcodeName[357:361],
	OpcodeLDHB:     _OpcodeName[361:365],
	OpcodeLDHC:     _OpcodeName[365:369],
	OpcodeLDHD:     _OpcodeName[369:373],
	OpcodeLDHE:     _OpcodeName[373:377],
	OpcodeLDHH:     _OpcodeName[377:381],
	OpcodeLDHL:     _OpcodeName[381:385],
	OpcodeLDHHL:    _OpcodeName[385:390],
	OpcodeLDHA:     _OpcodeName[390:394],
	OpcodeLDLB:     _OpcodeName[394:398],
	OpcodeLDLC:     _OpcodeName[398:402],
	OpcodeLDLD:     _OpcodeName[402:406],
	OpcodeLDLE:     _OpcodeName[406:410],
	OpcodeLDLH:     _OpcodeName[410:414],
	OpcodeLDLL:     _OpcodeName[414:418],
	OpcodeLDLHL:    _OpcodeName[418:423],
	OpcodeLDLA:     _OpcodeName[423:427],
	OpcodeLDHLB:    _OpcodeName[427:432],
	OpcodeLDHLC:    _OpcodeName[432:437],
	OpcodeLDHLD:    _OpcodeName[437:442],
	OpcodeLDHLE:    _OpcodeName[442:447],
	OpcodeLDHLH:    _OpcodeName[447:452],
	OpcodeLDHLL:    _OpcodeName[452:457],
	OpcodeHALT:     _OpcodeName[457:461],
	OpcodeLDHLA:    _OpcodeName[461:466],
	OpcodeLDAB:     _OpcodeName[466:470],
	OpcodeLDAC:     _OpcodeName[470:474],
	OpcodeLDAD:     _OpcodeName[474:478],
	OpcodeLDAE:     _OpcodeName[478:482],
	OpcodeLDAH:     _OpcodeName[482:486],
	OpcodeLDAL:     _OpcodeName[486:490],
	OpcodeLDAHL:    _OpcodeName[490:495],
	OpcodeLDAA:     _OpcodeName[495:499],
	OpcodeADDB:     _OpcodeName[499:503],
	OpcodeADDC:     _OpcodeName[503:507],
	OpcodeADDD:     _OpcodeName[507:511],
	OpcodeADDE:     _OpcodeName[511:515],
	OpcodeADDH:     _OpcodeName[515:519],
	OpcodeADDL:     _OpcodeName[519:523],
	OpcodeADDHL:    _OpcodeName[523:528],
	OpcodeADDA:     _OpcodeName[528:532],
	OpcodeADCB:     _OpcodeName[532:536],
	OpcodeADCC:     _OpcodeName[536:540],
	OpcodeADCD:     _OpcodeName[540:544],
	OpcodeADCE:     _OpcodeName[544:548],
	OpcodeADCH:     _OpcodeName[548:552],
	OpcodeADCL:     _OpcodeName[552:556],
	OpcodeADCHL:    _OpcodeName[556:561],
	OpcodeADCA:     _OpcodeName[561:565],
	OpcodeSUBB:     _OpcodeName[565:569],
	OpcodeSUBC:     _OpcodeName[569:573],
	OpcodeSUBD:     _OpcodeName[573:577],
	OpcodeSUBE:     _OpcodeName[577:581],
	OpcodeSUBH:     _OpcodeName[581:585],
	OpcodeSUBL:     _OpcodeName[585:589],
	OpcodeSUBHL:    _OpcodeName[589:594],
	OpcodeSUBA:     _OpcodeName[594:598],
	OpcodeSBCB:     _OpcodeName[598:602],
	OpcodeSBCC:     _OpcodeName[602:606],
	OpcodeSBCD:     _OpcodeName[606:610],
	OpcodeSBCE:     _OpcodeName[610:614],
	OpcodeSBCH:     _OpcodeName[614:618],
	OpcodeSBCL:     _OpcodeName[618:622],
	OpcodeSBCHL:    _OpcodeName[622:627],
	OpcodeSBCA:     _OpcodeName[627:631],
	OpcodeANDB:     _OpcodeName[631:635],
	OpcodeANDC:     _OpcodeName[635:639],
	OpcodeANDD:     _OpcodeName[639:643],
	OpcodeANDE:     _OpcodeName[643:647],
	OpcodeANDH:     _OpcodeName[647:651],
	OpcodeANDL:     _OpcodeName[651:655],
	OpcodeANDHL:    _OpcodeName[655:660],
	OpcodeANDA:     _OpcodeName[660:664],
	OpcodeXORB:     _OpcodeName[664:668],
	OpcodeXORC:     _OpcodeName[668:672],
	OpcodeXORD:     _OpcodeName[672:676],
	OpcodeXORE:     _OpcodeName[676:680],
	OpcodeXORH:     _OpcodeName[680:684],
	OpcodeXORL:     _OpcodeName[684:688],
	OpcodeXORHL:    _OpcodeName[688:693],
	OpcodeXORA:     _OpcodeName[693:697],
	OpcodeORB:      _OpcodeName[697:700],
	OpcodeORC:      _OpcodeName[700:703],
	OpcodeORD:      _OpcodeName[703:706],
	OpcodeORE:      _OpcodeName[706:709],
	OpcodeORH:      _OpcodeName[709:712],
	OpcodeORL:      _OpcodeName[712:715],
	OpcodeORHL:     _OpcodeName[715:719],
	OpcodeORA:      _OpcodeName[719:722],
	OpcodeCPB:      _OpcodeName[722:725],
	OpcodeCPC:      _OpcodeName[725:728],
	OpcodeCPD:      _OpcodeName[728:731],
	OpcodeCPE:      _OpcodeName[731:734],
	OpcodeCPH:      _OpcodeName[734:737],
	OpcodeCPL:      _OpcodeName[737:740],
	OpcodeCPHL:     _OpcodeName[740:744],
	OpcodeCPA:      _OpcodeName[744:747],
	OpcodeRETNZ:    _OpcodeName[747:752],
	OpcodePOPBC:    _OpcodeName[752:757],
	OpcodeJPNZnn:   _OpcodeName[757:763],
	OpcodeJPnn:     _OpcodeName[763:767],
	OpcodePUSHBC:   _OpcodeName[767:773],
	OpcodeADDn:     _OpcodeName[773:777],
	OpcodeRETZ:     _OpcodeName[777:781],
	OpcodeRET:      _OpcodeName[781:784],
	OpcodeJPZnn:    _OpcodeName[784:789],
	OpcodeCB:       _OpcodeName[789:791],
	OpcodeCALLnn:   _OpcodeName[791:797],
	OpcodeADCn:     _OpcodeName[797:801],
	OpcodeRETNC:    _OpcodeName[801:806],
	OpcodeRETC:     _OpcodeName[806:810],
	OpcodeRETI:     _OpcodeName[810:814],
	OpcodeJPCnn:    _OpcodeName[814:819],
	OpcodeJPNCnn:   _OpcodeName[819:825],
	OpcodeSUBn:     _OpcodeName[825:829],
	OpcodeSBCn:     _OpcodeName[829:833],
	OpcodeLDHnA:    _OpcodeName[833:838],
	OpcodeLDHCA:    _OpcodeName[838:843],
	OpcodeANDn:     _OpcodeName[843:847],
	OpcodeLDnnA:    _OpcodeName[847:852],
	OpcodeXORn:     _OpcodeName[852:856],
	OpcodeLDHAn:    _OpcodeName[856:861],
	OpcodeLDAnn:    _OpcodeName[861:866],
	OpcodeDI:       _OpcodeName[866:868],
	OpcodeORn:      _OpcodeName[868:871],
	OpcodeEI:       _OpcodeName[871:873],
	OpcodeCPn:      _OpcodeName[873:876],
}

// String implements the Stringer interface.
func (x Opcode) String() string {
	if str, ok := _OpcodeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Opcode(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Opcode) IsValid() bool {
	_, ok := _OpcodeMap[x]
	return ok
}

var _OpcodeValue = map[string]Opcode{
	_OpcodeName[0:3]:     OpcodeNop,
	_OpcodeName[3:9]:     OpcodeLDBCnn,
	_OpcodeName[9:14]:    OpcodeINCBC,
	_OpcodeName[14:18]:   OpcodeINCB,
	_OpcodeName[18:22]:   OpcodeDECB,
	_OpcodeName[22:26]:   OpcodeLDBn,
	_OpcodeName[26:33]:   OpcodeADDHLBC,
	_OpcodeName[33:38]:   OpcodeLDABC,
	_OpcodeName[38:43]:   OpcodeDECBC,
	_OpcodeName[43:47]:   OpcodeINCC,
	_OpcodeName[47:51]:   OpcodeDECC,
	_OpcodeName[51:55]:   OpcodeLDCn,
	_OpcodeName[55:61]:   OpcodeLDDEnn,
	_OpcodeName[61:66]:   OpcodeINCDE,
	_OpcodeName[66:70]:   OpcodeINCD,
	_OpcodeName[70:74]:   OpcodeDECD,
	_OpcodeName[74:78]:   OpcodeLDDn,
	_OpcodeName[78:81]:   OpcodeRLA,
	_OpcodeName[81:84]:   OpcodeJRe,
	_OpcodeName[84:91]:   OpcodeADDHLDE,
	_OpcodeName[91:96]:   OpcodeLDADE,
	_OpcodeName[96:101]:  OpcodeDECDE,
	_OpcodeName[101:105]: OpcodeINCE,
	_OpcodeName[105:109]: OpcodeDECE,
	_OpcodeName[109:113]: OpcodeLDEn,
	_OpcodeName[113:118]: OpcodeJRNZe,
	_OpcodeName[118:124]: OpcodeLDHLnn,
	_OpcodeName[124:132]: OpcodeLDHLAInc,
	_OpcodeName[132:137]: OpcodeINCHL,
	_OpcodeName[137:141]: OpcodeINCH,
	_OpcodeName[141:145]: OpcodeDECH,
	_OpcodeName[145:149]: OpcodeLDHn,
	_OpcodeName[149:153]: OpcodeJRZe,
	_OpcodeName[153:160]: OpcodeADDHLHL,
	_OpcodeName[160:165]: OpcodeDECHL,
	_OpcodeName[165:169]: OpcodeINCL,
	_OpcodeName[169:173]: OpcodeDECL,
	_OpcodeName[173:177]: OpcodeLDLn,
	_OpcodeName[177:182]: OpcodeJRNCe,
	_OpcodeName[182:188]: OpcodeLDSPnn,
	_OpcodeName[188:196]: OpcodeLDHLADec,
	_OpcodeName[196:201]: OpcodeINCSP,
	_OpcodeName[201:205]: OpcodeJRCe,
	_OpcodeName[205:212]: OpcodeADDHLSP,
	_OpcodeName[212:217]: OpcodeDECSP,
	_OpcodeName[217:221]: OpcodeINCA,
	_OpcodeName[221:225]: OpcodeDECA,
	_OpcodeName[225:229]: OpcodeLDAn,
	_OpcodeName[229:233]: OpcodeLDBB,
	_OpcodeName[233:237]: OpcodeLDBC,
	_OpcodeName[237:241]: OpcodeLDBD,
	_OpcodeName[241:245]: OpcodeLDBE,
	_OpcodeName[245:249]: OpcodeLDBH,
	_OpcodeName[249:253]: OpcodeLDBL,
	_OpcodeName[253:258]: OpcodeLDBHL,
	_OpcodeName[258:262]: OpcodeLDBA,
	_OpcodeName[262:266]: OpcodeLDCB,
	_OpcodeName[266:270]: OpcodeLDCC,
	_OpcodeName[270:274]: OpcodeLDCD,
	_OpcodeName[274:278]: OpcodeLDCE,
	_OpcodeName[278:282]: OpcodeLDCH,
	_OpcodeName[282:286]: OpcodeLDCL,
	_OpcodeName[286:291]: OpcodeLDCHL,
	_OpcodeName[291:295]: OpcodeLDCA,
	_OpcodeName[295:299]: OpcodeLDDB,
	_OpcodeName[299:303]: OpcodeLDDC,
	_OpcodeName[303:307]: OpcodeLDDD,
	_OpcodeName[307:311]: OpcodeLDDE,
	_OpcodeName[311:315]: OpcodeLDDH,
	_OpcodeName[315:319]: OpcodeLDDL,
	_OpcodeName[319:324]: OpcodeLDDHL,
	_OpcodeName[324:328]: OpcodeLDDA,
	_OpcodeName[328:332]: OpcodeLDEB,
	_OpcodeName[332:336]: OpcodeLDEC,
	_OpcodeName[336:340]: OpcodeLDED,
	_OpcodeName[340:344]: OpcodeLDEE,
	_OpcodeName[344:348]: OpcodeLDEH,
	_OpcodeName[348:352]: OpcodeLDEL,
	_OpcodeName[352:357]: OpcodeLDEHL,
	_OpcodeName[357:361]: OpcodeLDEA,
	_OpcodeName[361:365]: OpcodeLDHB,
	_OpcodeName[365:369]: OpcodeLDHC,
	_OpcodeName[369:373]: OpcodeLDHD,
	_OpcodeName[373:377]: OpcodeLDHE,
	_OpcodeName[377:381]: OpcodeLDHH,
	_OpcodeName[381:385]: OpcodeLDHL,
	_OpcodeName[385:390]: OpcodeLDHHL,
	_OpcodeName[390:394]: OpcodeLDHA,
	_OpcodeName[394:398]: OpcodeLDLB,
	_OpcodeName[398:402]: OpcodeLDLC,
	_OpcodeName[402:406]: OpcodeLDLD,
	_OpcodeName[406:410]: OpcodeLDLE,
	_OpcodeName[410:414]: OpcodeLDLH,
	_OpcodeName[414:418]: OpcodeLDLL,
	_OpcodeName[418:423]: OpcodeLDLHL,
	_OpcodeName[423:427]: OpcodeLDLA,
	_OpcodeName[427:432]: OpcodeLDHLB,
	_OpcodeName[432:437]: OpcodeLDHLC,
	_OpcodeName[437:442]: OpcodeLDHLD,
	_OpcodeName[442:447]: OpcodeLDHLE,
	_OpcodeName[447:452]: OpcodeLDHLH,
	_OpcodeName[452:457]: OpcodeLDHLL,
	_OpcodeName[457:461]: OpcodeHALT,
	_OpcodeName[461:466]: OpcodeLDHLA,
	_OpcodeName[466:470]: OpcodeLDAB,
	_OpcodeName[470:474]: OpcodeLDAC,
	_OpcodeName[474:478]: OpcodeLDAD,
	_OpcodeName[478:482]: OpcodeLDAE,
	_OpcodeName[482:486]: OpcodeLDAH,
	_OpcodeName[486:490]: OpcodeLDAL,
	_OpcodeName[490:495]: OpcodeLDAHL,
	_OpcodeName[495:499]: OpcodeLDAA,
	_OpcodeName[499:503]: OpcodeADDB,
	_OpcodeName[503:507]: OpcodeADDC,
	_OpcodeName[507:511]: OpcodeADDD,
	_OpcodeName[511:515]: OpcodeADDE,
	_OpcodeName[515:519]: OpcodeADDH,
	_OpcodeName[519:523]: OpcodeADDL,
	_OpcodeName[523:528]: OpcodeADDHL,
	_OpcodeName[528:532]: OpcodeADDA,
	_OpcodeName[532:536]: OpcodeADCB,
	_OpcodeName[536:540]: OpcodeADCC,
	_OpcodeName[540:544]: OpcodeADCD,
	_OpcodeName[544:548]: OpcodeADCE,
	_OpcodeName[548:552]: OpcodeADCH,
	_OpcodeName[552:556]: OpcodeADCL,
	_OpcodeName[556:561]: OpcodeADCHL,
	_OpcodeName[561:565]: OpcodeADCA,
	_OpcodeName[565:569]: OpcodeSUBB,
	_OpcodeName[569:573]: OpcodeSUBC,
	_OpcodeName[573:577]: OpcodeSUBD,
	_OpcodeName[577:581]: OpcodeSUBE,
	_OpcodeName[581:585]: OpcodeSUBH,
	_OpcodeName[585:589]: OpcodeSUBL,
	_OpcodeName[589:594]: OpcodeSUBHL,
	_OpcodeName[594:598]: OpcodeSUBA,
	_OpcodeName[598:602]: OpcodeSBCB,
	_OpcodeName[602:606]: OpcodeSBCC,
	_OpcodeName[606:610]: OpcodeSBCD,
	_OpcodeName[610:614]: OpcodeSBCE,
	_OpcodeName[614:618]: OpcodeSBCH,
	_OpcodeName[618:622]: OpcodeSBCL,
	_OpcodeName[622:627]: OpcodeSBCHL,
	_OpcodeName[627:631]: OpcodeSBCA,
	_OpcodeName[631:635]: OpcodeANDB,
	_OpcodeName[635:639]: OpcodeANDC,
	_OpcodeName[639:643]: OpcodeANDD,
	_OpcodeName[643:647]: OpcodeANDE,
	_OpcodeName[647:651]: OpcodeANDH,
	_OpcodeName[651:655]: OpcodeANDL,
	_OpcodeName[655:660]: OpcodeANDHL,
	_OpcodeName[660:664]: OpcodeANDA,
	_OpcodeName[664:668]: OpcodeXORB,
	_OpcodeName[668:672]: OpcodeXORC,
	_OpcodeName[672:676]: OpcodeXORD,
	_OpcodeName[676:680]: OpcodeXORE,
	_OpcodeName[680:684]: OpcodeXORH,
	_OpcodeName[684:688]: OpcodeXORL,
	_OpcodeName[688:693]: OpcodeXORHL,
	_OpcodeName[693:697]: OpcodeXORA,
	_OpcodeName[697:700]: OpcodeORB,
	_OpcodeName[700:703]: OpcodeORC,
	_OpcodeName[703:706]: OpcodeORD,
	_OpcodeName[706:709]: OpcodeORE,
	_OpcodeName[709:712]: OpcodeORH,
	_OpcodeName[712:715]: OpcodeORL,
	_OpcodeName[715:719]: OpcodeORHL,
	_OpcodeName[719:722]: OpcodeORA,
	_OpcodeName[722:725]: OpcodeCPB,
	_OpcodeName[725:728]: OpcodeCPC,
	_OpcodeName[728:731]: OpcodeCPD,
	_OpcodeName[731:734]: OpcodeCPE,
	_OpcodeName[734:737]: OpcodeCPH,
	_OpcodeName[737:740]: OpcodeCPL,
	_OpcodeName[740:744]: OpcodeCPHL,
	_OpcodeName[744:747]: OpcodeCPA,
	_OpcodeName[747:752]: OpcodeRETNZ,
	_OpcodeName[752:757]: OpcodePOPBC,
	_OpcodeName[757:763]: OpcodeJPNZnn,
	_OpcodeName[763:767]: OpcodeJPnn,
	_OpcodeName[767:773]: OpcodePUSHBC,
	_OpcodeName[773:777]: OpcodeADDn,
	_OpcodeName[777:781]: OpcodeRETZ,
	_OpcodeName[781:784]: OpcodeRET,
	_OpcodeName[784:789]: OpcodeJPZnn,
	_OpcodeName[789:791]: OpcodeCB,
	_OpcodeName[791:797]: OpcodeCALLnn,
	_OpcodeName[797:801]: OpcodeADCn,
	_OpcodeName[801:806]: OpcodeRETNC,
	_OpcodeName[806:810]: OpcodeRETC,
	_OpcodeName[810:814]: OpcodeRETI,
	_OpcodeName[814:819]: OpcodeJPCnn,
	_OpcodeName[819:825]: OpcodeJPNCnn,
	_OpcodeName[825:829]: OpcodeSUBn,
	_OpcodeName[829:833]: OpcodeSBCn,
	_OpcodeName[833:838]: OpcodeLDHnA,
	_OpcodeName[838:843]: OpcodeLDHCA,
	_OpcodeName[843:847]: OpcodeANDn,
	_OpcodeName[847:852]: OpcodeLDnnA,
	_OpcodeName[852:856]: OpcodeXORn,
	_OpcodeName[856:861]: OpcodeLDHAn,
	_OpcodeName[861:866]: OpcodeLDAnn,
	_OpcodeName[866:868]: OpcodeDI,
	_OpcodeName[868:871]: OpcodeORn,
	_OpcodeName[871:873]: OpcodeEI,
	_OpcodeName[873:876]: OpcodeCPn,
}

// ParseOpcode attempts to convert a string to a Opcode.
func ParseOpcode(name string) (Opcode, error) {
	if x, ok := _OpcodeValue[name]; ok {
		return x, nil
	}
	return Opcode(0), fmt.Errorf("%s is %w", name, ErrInvalidOpcode)
}

// MarshalText implements the text marshaller method.
func (x Opcode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Opcode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseOpcode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *Opcode) Set(val string) error {
	v, err := ParseOpcode(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Opcode) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Opcode) Type() string {
	return "Opcode"
}

const (
	CbRLC cb = iota
	CbRRC
	CbRL
	CbRR
	CbSLA
	CbSRA
	CbSWAP
	CbSRL
	CbBit0
	CbBit1
	CbBit2
	CbBit3
	CbBit4
	CbBit5
	CbBit6
	CbBit7
	CbRes0
	CbRes1
	CbRes2
	CbRes3
	CbRes4
	CbRes5
	CbRes6
	CbRes7
	CbSet0
	CbSet1
	CbSet2
	CbSet3
	CbSet4
	CbSet5
	CbSet6
	CbSet7
)

var ErrInvalidcb = errors.New("not a valid cb")

const _cbName = "RLCRRCRLRRSLASRASWAPSRLBit0Bit1Bit2Bit3Bit4Bit5Bit6Bit7Res0Res1Res2Res3Res4Res5Res6Res7Set0Set1Set2Set3Set4Set5Set6Set7"

// cbValues returns a list of the values for cb
func cbValues() []cb {
	return []cb{
		CbRLC,
		CbRRC,
		CbRL,
		CbRR,
		CbSLA,
		CbSRA,
		CbSWAP,
		CbSRL,
		CbBit0,
		CbBit1,
		CbBit2,
		CbBit3,
		CbBit4,
		CbBit5,
		CbBit6,
		CbBit7,
		CbRes0,
		CbRes1,
		CbRes2,
		CbRes3,
		CbRes4,
		CbRes5,
		CbRes6,
		CbRes7,
		CbSet0,
		CbSet1,
		CbSet2,
		CbSet3,
		CbSet4,
		CbSet5,
		CbSet6,
		CbSet7,
	}
}

var _cbMap = map[cb]string{
	CbRLC:  _cbName[0:3],
	CbRRC:  _cbName[3:6],
	CbRL:   _cbName[6:8],
	CbRR:   _cbName[8:10],
	CbSLA:  _cbName[10:13],
	CbSRA:  _cbName[13:16],
	CbSWAP: _cbName[16:20],
	CbSRL:  _cbName[20:23],
	CbBit0: _cbName[23:27],
	CbBit1: _cbName[27:31],
	CbBit2: _cbName[31:35],
	CbBit3: _cbName[35:39],
	CbBit4: _cbName[39:43],
	CbBit5: _cbName[43:47],
	CbBit6: _cbName[47:51],
	CbBit7: _cbName[51:55],
	CbRes0: _cbName[55:59],
	CbRes1: _cbName[59:63],
	CbRes2: _cbName[63:67],
	CbRes3: _cbName[67:71],
	CbRes4: _cbName[71:75],
	CbRes5: _cbName[75:79],
	CbRes6: _cbName[79:83],
	CbRes7: _cbName[83:87],
	CbSet0: _cbName[87:91],
	CbSet1: _cbName[91:95],
	CbSet2: _cbName[95:99],
	CbSet3: _cbName[99:103],
	CbSet4: _cbName[103:107],
	CbSet5: _cbName[107:111],
	CbSet6: _cbName[111:115],
	CbSet7: _cbName[115:119],
}

// String implements the Stringer interface.
func (x cb) String() string {
	if str, ok := _cbMap[x]; ok {
		return str
	}
	return fmt.Sprintf("cb(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x cb) IsValid() bool {
	_, ok := _cbMap[x]
	return ok
}

var _cbValue = map[string]cb{
	_cbName[0:3]:     CbRLC,
	_cbName[3:6]:     CbRRC,
	_cbName[6:8]:     CbRL,
	_cbName[8:10]:    CbRR,
	_cbName[10:13]:   CbSLA,
	_cbName[13:16]:   CbSRA,
	_cbName[16:20]:   CbSWAP,
	_cbName[20:23]:   CbSRL,
	_cbName[23:27]:   CbBit0,
	_cbName[27:31]:   CbBit1,
	_cbName[31:35]:   CbBit2,
	_cbName[35:39]:   CbBit3,
	_cbName[39:43]:   CbBit4,
	_cbName[43:47]:   CbBit5,
	_cbName[47:51]:   CbBit6,
	_cbName[51:55]:   CbBit7,
	_cbName[55:59]:   CbRes0,
	_cbName[59:63]:   CbRes1,
	_cbName[63:67]:   CbRes2,
	_cbName[67:71]:   CbRes3,
	_cbName[71:75]:   CbRes4,
	_cbName[75:79]:   CbRes5,
	_cbName[79:83]:   CbRes6,
	_cbName[83:87]:   CbRes7,
	_cbName[87:91]:   CbSet0,
	_cbName[91:95]:   CbSet1,
	_cbName[95:99]:   CbSet2,
	_cbName[99:103]:  CbSet3,
	_cbName[103:107]: CbSet4,
	_cbName[107:111]: CbSet5,
	_cbName[111:115]: CbSet6,
	_cbName[115:119]: CbSet7,
}

// Parsecb attempts to convert a string to a cb.
func Parsecb(name string) (cb, error) {
	if x, ok := _cbValue[name]; ok {
		return x, nil
	}
	return cb(0), fmt.Errorf("%s is %w", name, ErrInvalidcb)
}

// MarshalText implements the text marshaller method.
func (x cb) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *cb) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := Parsecb(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *cb) Set(val string) error {
	v, err := Parsecb(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *cb) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *cb) Type() string {
	return "cb"
}
